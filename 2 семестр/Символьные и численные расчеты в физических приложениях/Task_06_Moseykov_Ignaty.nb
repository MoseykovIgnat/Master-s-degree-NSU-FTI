(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    476344,       8766]
NotebookOptionsPosition[    460855,       8497]
NotebookOutlinePosition[    466026,       8617]
CellTagsIndexPosition[    465983,       8614]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\:0417\:0430\:0434\:0430\:043d\:0438\:0435 06.", "Title",
 CellChangeTimes->{{3.760057995462968*^9, 3.760057995566958*^9}, {
  3.7909142828165092`*^9, 3.790914282954789*^9}, {3.8575061545655937`*^9, 
  3.857506154720953*^9}},ExpressionUUID->"45c6e929-c9d7-4fbe-b75d-\
64e24df02906"],

Cell["\:0421\:043f\:0438\:0441\:043a\:0438", "Subtitle",
 CellChangeTimes->{{3.695948812748114*^9, 3.695948813487027*^9}, 
   3.6959488526642237`*^9, {3.695953580854377*^9, 3.695953582662114*^9}, {
   3.695957446828622*^9, 3.695957456375224*^9}, {3.72895984288056*^9, 
   3.728959849496436*^9}, {3.7295569401829233`*^9, 3.729556956022635*^9}, {
   3.730166305978351*^9, 3.730166315036029*^9}, {3.760057997654602*^9, 
   3.76005801278274*^9}, {3.857506156700202*^9, 3.857506174052711*^9}, {
   3.8575136373276377`*^9, 
   3.8575136555918093`*^9}},ExpressionUUID->"d5e51de8-5e00-439c-bbad-\
b34962655384"],

Cell["\:041c\:043e\:0441\:0435\:0439\:043a\:043e\:0432 \:0418\:0433\:043d\
\:0430\:0442\:0438\:0439 \:0413\:0435\:043d\:043d\:0430\:0434\:044c\:0435\
\:0432\:0438\:0447, \:0433\:0440\:0443\:043f\:043f\:0430 \:211621372", \
"Subtitle",
 CellChangeTimes->{{3.6959561263823643`*^9, 3.695956129310951*^9}, {
  3.8229715689661293`*^9, 3.8229715840584526`*^9}, {3.858760598905816*^9, 
  3.8587606072409115`*^9}},ExpressionUUID->"182cd4ce-250c-4115-bbc6-\
dacda41fc4de"],

Cell[TextData[{
 "\n\:041e\:0431\:0440\:0430\:0442\:0438\:0442\:0435 \:0432\:043d\:0438\:043c\
\:0430\:043d\:0438\:0435 \:043d\:0430 \:0440\:0430\:0437\:0434\:0435\:043b \
\:0441\:043f\:0440\:0430\:0432\:043a\:0438 \:043f\:043e \:043f\:0440\:0438\
\:043c\:0435\:043d\:0435\:043d\:0438\:044e \:0444\:0443\:043d\:043a\:0446\
\:0438\:0439 \:043a \:0441\:043f\:0438\:0441\:043a\:0430\:043c (\:0441\:0441\
\:044b\:043b\:043a\:0430: ",
 ButtonBox["Applying Functions to Lists",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ApplyingFunctionsToLists"],
 "), \:043e\:0441\:043e\:0431\:0435\:043d\:043d\:043e \:043d\:0430 \:0444\
\:0443\:043d\:043a\:0446\:0438\:043e\:043d\:0430\:043b\:044c\:043d\:044b\:0439\
 \:043f\:043e\:0434\:0445\:043e\:0434 \:043a \:043f\:0440\:043e\:0433\:0440\
\:0430\:043c\:043c\:0438\:0440\:043e\:0432\:0430\:043d\:0438\:044e. \:0420\
\:0430\:0437\:0431\:0435\:0440\:0438\:0442\:0435\:0441\:044c \:043a\:0430\
\:043a \:0440\:0430\:0431\:043e\:0442\:0430\:044e\:0442 \:043d\:0430\:0438\
\:0431\:043e\:043b\:0435\:0435 \:0447\:0430\:0441\:0442\:043e \:0438\:0441\
\:043f\:043e\:043b\:044c\:0437\:0443\:0435\:043c\:044b\:0435 \:0444\:0443\
\:043d\:043a\:0446\:0438\:0438 ",
 StyleBox["Map",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Thread, Through",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Outer",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Inner",
  FontWeight->"Bold"],
 ", \:043a\:043e\:0442\:043e\:0440\:044b\:0435 \:043f\:043e\:0437\:0432\:043e\
\:043b\:044f\:044e\:0442 \:0440\:0430\:0441\:043f\:0440\:043e\:0441\:0442\
\:0440\:0430\:043d\:044f\:0442\:044c \:0434\:0435\:0439\:0441\:0442\:0432\
\:0438\:0435 \:0444\:0443\:043d\:043a\:0446\:0438\:0439 \:043d\:0430 \:0441\
\:043f\:0438\:0441\:043a\:0438 \:0437\:043d\:0430\:0447\:0435\:043d\:0438\
\:0439 \:0440\:0430\:0437\:043d\:044b\:043c\:0438 \:0441\:043f\:043e\:0441\
\:043e\:0431\:0430\:043c\:0438.\n\n\:041d\:0435 \
\:043e\:0431\:044f\:0437\:0430\:0442\:0435\:043b\:044c\:043d\:043e, \:043d\
\:043e \:043f\:043e\:043b\:0435\:0437\:043d\:043e \:043f\:0440\:043e\:0441\
\:043c\:043e\:0442\:0440\:0435\:0442\:044c \:043c\:0430\:0442\:0435\:0440\
\:0438\:0430\:043b\:044b \:043e \:0444\:0443\:043d\:043a\:0446\:0438\:043e\
\:043d\:0430\:043b\:044c\:043d\:044b\:0445 \:043e\:043f\:0435\:0440\:0430\
\:0446\:0438\:044f\:0445 \:0432 \:0446\:0435\:043b\:043e\:043c \:0432 Wolfram \
Mathematica (\:0441\:0441\:044b\:043b\:043a\:0430: ",
 ButtonBox["Functional Operations",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/FunctionalOperationsOverview"],
 ")"
}], "Text",
 CellChangeTimes->{
  3.857506423055867*^9, {3.8575064532474813`*^9, 3.8575066249169817`*^9}, {
   3.857506656421947*^9, 3.857506711948415*^9}, {3.8575069392428627`*^9, 
   3.857507023360779*^9}, {3.857508200000461*^9, 3.857508211719954*^9}, {
   3.8575084037695227`*^9, 3.857508500537348*^9}, {3.857508588186494*^9, 
   3.857508738185905*^9}, {3.857513628305537*^9, 
   3.857513629416065*^9}},ExpressionUUID->"08878038-b1d3-498c-889e-\
daa9c94692b8"],

Cell[CellGroupData[{

Cell["1. \:0418\:0442\:0435\:0440\:0430\:0446\:0438\:0438 vs \:0444\:0443\
\:043d\:043a\:0446\:0438\:043e\:043d\:0430\:043b\:044c\:043d\:044b\:0439 \
\:043f\:043e\:0434\:0445\:043e\:0434 vs \:0432\:0441\:0442\:0440\:043e\:0435\
\:043d\:043d\:0430\:044f \:0444\:0443\:043d\:043a\:0446\:0438\:044f ", \
"Section",
 CellChangeTimes->{{3.857506328721486*^9, 3.8575063922961283`*^9}, {
  3.857507864524815*^9, 
  3.857507870772354*^9}},ExpressionUUID->"27649fba-b57a-46eb-9fd3-\
b5b9f25bf5e2"],

Cell[TextData[{
 "\:041d\:0430\:043f\:0438\:0448\:0438\:0442\:0435 \:0442\:0440\:0438 \:0444\
\:0443\:043d\:043a\:0446\:0438\:0438, \:043a\:043e\:0442\:043e\:0440\:044b\
\:0435 \:043f\:0440\:0438\:043d\:0438\:043c\:0430\:044e\:0442 \:0441\:043f\
\:0438\:0441\:043e\:043a \:0438 \:0432\:044b\:0447\:0438\:0441\:043b\:044f\
\:044e\:0442 \:0441\:0443\:043c\:043c\:0443 \:044d\:043b\:0435\:043c\:0435\
\:043d\:0442\:043e\:0432 \:0432 \:0441\:043f\:0438\:0441\:043a\:0435:\n1) \
\:0438\:0441\:043f\:043e\:043b\:044c\:0437\:0443\:044f \:043f\:0440\:043e\
\:0446\:0435\:0434\:0443\:0440\:043d\:044b\:0439 \:043f\:043e\:0434\:0445\
\:043e\:0434 \:0447\:0435\:0440\:0435\:0437 \:0446\:0438\:043a\:043b (",
 StyleBox["Do",
  FontWeight->"Bold"],
 ") \:0438 \:043e\:0431\:043d\:043e\:0432\:043b\:0435\:043d\:0438\:0435\:043c \
\:0440\:0435\:0437\:0443\:043b\:044c\:0442\:0430\:0442\:0430 \:0441\:0443\
\:043c\:043c\:0438\:0440\:043e\:0432\:0430\:043d\:0438\:044f \:0432\:043e \
\:0432\:0440\:0435\:043c\:0435\:043d\:043d\:043e\:0439 \:043f\:0435\:0440\
\:0435\:043c\:0435\:043d\:043d\:043e\:0439\n2) \:0438\:0441\:043f\:043e\:043b\
\:044c\:0437\:0443\:044f \:0444\:0443\:043d\:043a\:0446\:0438\:043e\:043d\
\:0430\:043b\:044c\:043d\:044b\:0439 \:043f\:043e\:0434\:0445\:043e\:0434 (",
 StyleBox["Apply[Plus, list]",
  FontWeight->"Bold"],
 ")\n3) \:0438\:0441\:043f\:043e\:043b\:044c\:0437\:0443\:044f \:0432\:0441\
\:0442\:0440\:043e\:0435\:043d\:043d\:0443\:044e \:0444\:0443\:043d\:043a\
\:0446\:0438\:044e (",
 StyleBox["Total",
  FontWeight->"Bold"],
 ")"
}], "Text",
 CellChangeTimes->{{3.857506717991846*^9, 3.857506727867655*^9}, {
  3.8575068556753607`*^9, 3.8575069259618797`*^9}, {3.857507035383811*^9, 
  3.857507169742671*^9}, {3.857507964989564*^9, 3.857507970645616*^9}, {
  3.8575080084064503`*^9, 3.857508028686575*^9}, {3.857516297932951*^9, 
  3.857516316879547*^9}, {3.857522199278491*^9, 
  3.857522257230044*^9}},ExpressionUUID->"fe28fdc7-d59c-4f57-8022-\
10ed163763a6"],

Cell[TextData[{
 "\:0412 Mathematica \:0435\:0441\:0442\:044c \:0432\:0441\:0442\:0440\:043e\
\:0435\:043d\:043d\:044b\:0435 \:0444\:0443\:043d\:043a\:0446\:0438\:0438 \
\:0438\:0437\:043c\:0435\:0440\:0435\:043d\:0438\:044f \:0432\:0440\:0435\
\:043c\:0435\:043d\:0438 \:0432\:044b\:043f\:043e\:043b\:043d\:0435\:043d\
\:0438\:044f \:043e\:043f\:0435\:0440\:0430\:0446\:0438\:0439 (\:043d\:0430\
\:043f\:0440\:0438\:043c\:0435\:0440, ",
 StyleBox["Timing",
  FontWeight->"Bold"],
 "). \:0418\:0441\:043f\:043e\:043b\:044c\:0437\:0443\:044f \:0435\:0435, \
\:043f\:043e\:0441\:0442\:0440\:043e\:0439\:0442\:0435 \:0433\:0440\:0430\
\:0444\:0438\:043a\:0438 \:0432\:0440\:0435\:043c\:0435\:043d\:0438 \:0432\
\:044b\:043f\:043e\:043b\:043d\:0435\:043d\:0438\:044f \:043e\:0442 \:043a\
\:043e\:043b\:0438\:0447\:0435\:0441\:0442\:0432\:0430 \:044d\:043b\:0435\
\:043c\:0435\:043d\:0442\:043e\:0432 \:0432 \:0441\:043f\:0438\:0441\:043a\
\:0435 (\:0434\:043b\:044f \:0434\:043b\:0438\:043d\:044b \:0441\:043f\:0438\
\:0441\:043a\:0430 \:043f\:043e\:0440\:044f\:0434\:043a\:0430 ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "6"], TraditionalForm]],ExpressionUUID->
  "6bde2284-2067-4f48-92a2-d96ba07f3581"],
 " \:0432\:044b\:0447\:0438\:0441\:043b\:0435\:043d\:0438\:044f \:0443\:0436\
\:0435 \:0437\:0430\:043d\:0438\:043c\:0430\:044e\:0442 \:0437\:0430\:043c\
\:0435\:0442\:043d\:043e\:0435 \:0432\:0440\:0435\:043c\:044f; \:0434\:043b\
\:044f \:043e\:0442\:0440\:0438\:0441\:043e\:0432\:043a\:0438 \:043c\:043e\
\:0436\:0435\:0442 \:043f\:043e\:043b\:0435\:0437\:043d\:0430 \:0444\:0443\
\:043d\:043a\:0446\:0438\:044f ",
 StyleBox["ListLogLogPlot",
  FontWeight->"Bold"],
 " \:0434\:043b\:044f \:0434\:0432\:0430\:0436\:0434\:044b \:043b\:043e\:0433\
\:0430\:0440\:0438\:0444\:043c\:0438\:0447\:0435\:0441\:043a\:043e\:0433\:043e\
 \:043c\:0430\:0441\:0448\:0442\:0430\:0431\:0430)"
}], "Text",
 CellChangeTimes->{{3.857507175860317*^9, 3.857507271374814*^9}, {
  3.857507353751*^9, 3.857507713396371*^9}, {3.857507772916173*^9, 
  3.857507856500288*^9}, {3.8575163359337397`*^9, 3.857516373756184*^9}, {
  3.857521864430971*^9, 3.857521920079376*^9}, {3.8575220049437027`*^9, 
  3.8575221367694187`*^9}},ExpressionUUID->"033e85f5-87af-48ab-8ef6-\
c26eb8bbb105"],

Cell[TextData[{
 "\:0412 \:043a\:0430\:0447\:0435\:0441\:0442\:0432\:0435 \:0441\:043f\:0438\
\:0441\:043a\:0430 \:043f\:043e\:043f\:0440\:043e\:0431\:0443\:0439\:0442\
\:0435 \:043f\:0435\:0440\:0435\:0434\:0430\:0432\:0430\:0442\:044c \:043f\
\:0440\:0435\:0434\:0432\:0430\:0440\:0438\:0442\:0435\:043b\:044c\:043d\:043e\
 \:0441\:043e\:0437\:0434\:0430\:043d\:043d\:044b\:0439 \:0441\:043f\:0438\
\:0441\:043e\:043a\n- \:043d\:0430\:0442\:0443\:0440\:0430\:043b\:044c\:043d\
\:044b\:0445 \:0447\:0438\:0441\:0435\:043b \:043e\:0442 1 \:0434\:043e n (",
 StyleBox["Range",
  FontWeight->"Bold"],
 ")\n- \:0438\:0437 n \:0441\:043b\:0443\:0447\:0430\:0439\:043d\:044b\:0445 \
\:0447\:0438\:0441\:0435\:043b (\:0446\:0435\:043b\:044b\:0445 \:0438\:043b\
\:0438 \:0432\:0435\:0449\:0435\:0441\:0442\:0432\:0435\:043d\:043d\:044b\
\:0445 ",
 StyleBox["RandomReal",
  FontWeight->"Bold"],
 ", ",
 StyleBox["RandomInteger",
  FontWeight->"Bold"],
 ")\n- \:0441\:043f\:0438\:0441\:043e\:043a n \:0441\:0438\:043c\:0432\:043e\
\:043b\:044c\:043d\:044b\:0445 \:0437\:043d\:0430\:0447\:0435\:043d\:0438\
\:0439 {x, 2x, 3x, ..., n x}, \:0433\:0434\:0435 ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "4a3ea98b-a0f0-4860-95a1-30d281d2df6a"],
 " \[LongDash] \:0441\:0438\:043c\:0432\:043e\:043b"
}], "Text",
 CellChangeTimes->{{3.857507175860317*^9, 3.857507271374814*^9}, {
  3.857507353751*^9, 3.857507713396371*^9}, {3.857507772916173*^9, 
  3.857507858380375*^9}, {3.8575083102486963`*^9, 3.857508322624222*^9}, {
  3.85752192783132*^9, 3.857521999855605*^9}, {3.857522155328753*^9, 
  3.8575221556891003`*^9}},ExpressionUUID->"39ac23be-8e46-45ef-969b-\
3a10c368619c"],

Cell["\:041f\:043e \:0440\:0435\:0437\:0443\:043b\:044c\:0442\:0430\:0442\
\:0430\:043c \:0441\:0434\:0435\:043b\:0430\:0439\:0442\:0435 \:0432\:044b\
\:0432\:043e\:0434\:044b \:043e\:0431 \:044d\:0444\:0444\:0435\:043a\:0442\
\:0438\:0432\:043d\:043e\:0441\:0442\:0438 \:043f\:043e\:0434\:0445\:043e\
\:0434\:043e\:0432", "Text",
 CellChangeTimes->{{3.857507897361223*^9, 3.857508005373322*^9}, {
  3.8575087473308*^9, 3.8575087502656183`*^9}, {3.85751639629292*^9, 
  3.857516399331778*^9}},ExpressionUUID->"79ea1fcf-b23a-41c4-a66d-\
a8351813fdfe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fDo", "[", "x_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"S", "=", "0"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"S", "+=", 
         RowBox[{"x", "[", 
          RowBox[{"[", "n", "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "1", ",", 
          RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}], ";", "S"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fApply", "[", "x_", "]"}], ":=", 
   RowBox[{"Apply", "[", 
    RowBox[{"Plus", ",", "x"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fTotal", "[", "x_", "]"}], ":=", 
   RowBox[{"Total", "[", "x", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8587627124533467`*^9, 3.858762722794326*^9}, 
   3.8587631445837307`*^9, {3.858763268063736*^9, 3.858763281512022*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"531429d7-f9e9-4593-9c7c-2e3831e64502"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["Timing",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        RowBox[{"fDo", "[", 
         RowBox[{"Range", "[", "n", "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"{", 
         RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
    RowBox[{"AxesLabel", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
    
    RowBox[{"PlotLabel", "->", "\"\<Do\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8587631467779293`*^9, 3.858763174832249*^9}, 
   3.858763288382186*^9},
 CellLabel->
  "In[146]:=",ExpressionUUID->"fd77f649-a581-4f29-acd2-5d200d146d3b"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.078125}, {6., 
      0.609375}, {6.170553935860059, 1.5234375}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Do\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 1.5234375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8587631836263323`*^9, 3.858763295903514*^9, 
  3.8587637989770803`*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"7c5c14e8-a727-4680-94df-cd712f4ad60c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{"fApply", "[", 
        RowBox[{"Range", "[", "n", "]"}], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Apply\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8587628191747055`*^9, 3.858762819177706*^9}, {
   3.858763183024101*^9, 3.8587631935267787`*^9}, 3.858763299013494*^9},
 CellLabel->
  "In[147]:=",ExpressionUUID->"254de4a8-1cd0-434a-9bc5-dc34b13db916"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.015625}, {6., 
      0.109375}, {6.184210526315789, 0.2734375}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Apply\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 0.2734375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.858763198601384*^9, 3.858763301109194*^9, 
  3.858763800351476*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"631003f1-bf6f-4baf-804d-7137cd6fb158"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["Timing",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        RowBox[{"fTotal", "[", 
         RowBox[{"Range", "[", "n", "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"{", 
         RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
    RowBox[{"AxesLabel", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
    
    RowBox[{"PlotLabel", "->", "\"\<Apply\>\""}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.858762734423904*^9, 3.858762739073092*^9}, 
   3.8587628166096973`*^9, {3.858763205026346*^9, 3.8587632375065236`*^9}, 
   3.8587633044332886`*^9},
 CellLabel->
  "In[148]:=",ExpressionUUID->"a0552232-0cfc-4dde-93a6-eb0c78a52435"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {6., 0.}, {7.,
       0.015625}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Apply\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 0.015625}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8587632157630916`*^9, 3.858763238953907*^9}, 
   3.8587633057726145`*^9, 3.8587638004409113`*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"182e84ce-efaf-499b-b833-39b800a36a21"]
}, Open  ]],

Cell["\<\
(RANGE) Total \:0432\:044b\:043f\:043e\:043b\:043d\:044f\:0435\:0442\:0441\
\:044f \:0431\:044b\:0441\:0442\:0440\:0435\:0435. 
\
\>", "Text",
 CellChangeTimes->{{3.85876332556083*^9, 3.858763388880022*^9}, {
  3.858763486344037*^9, 
  3.858763487801652*^9}},ExpressionUUID->"549a661f-f75e-4e5f-8a2e-\
82820c82f001"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{"fDo", "[", 
        StyleBox[
         RowBox[{"RandomReal", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", "n", "}"}]}], "]"}],
         FontWeight->"Bold"], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Do\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8587633712303157`*^9, 3.858763398025323*^9}, 
   3.8587635159035873`*^9},
 CellLabel->
  "In[149]:=",ExpressionUUID->"1c73e86b-05b9-43ad-850f-0f2972e1265c"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.078125}, {6., 
      0.609375}, {6.167142857142857, 1.5234375}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Do\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 1.5234375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.858763408408078*^9, 3.8587635315275517`*^9, 
  3.858763807301972*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"3c79d151-ecd3-416d-aa6c-d05f4e45ff97"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8587628134696646`*^9, 
  3.8587628134726653`*^9}},ExpressionUUID->"19bd52bc-1ac8-465b-861a-\
77f55fed6766"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{"fApply", "[", 
        StyleBox[
         RowBox[{"RandomReal", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", "n", "}"}]}], "]"}],
         FontWeight->"Bold"], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Apply\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.858762749315538*^9, 3.8587627496227064`*^9}, 
   3.858762812029726*^9, {3.858763407474774*^9, 3.8587634193290815`*^9}, 
   3.8587635184582863`*^9},
 CellLabel->
  "In[150]:=",ExpressionUUID->"eb5e6026-d407-4d9f-9c6f-c2a5f5c2e7d7"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {6., 
      0.109375}, {6.159090909090909, 0.2734375}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Apply\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 0.2734375}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8587634233743315`*^9, 3.8587635330169687`*^9, 
  3.8587638088035927`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"d6b112e4-0cff-49a0-b52a-66ece3bdaf65"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{"fTotal", "[", 
        StyleBox[
         RowBox[{"RandomReal", "[", 
          RowBox[{"1", ",", 
           RowBox[{"{", "n", "}"}]}], "]"}],
         FontWeight->"Bold"], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Total\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.858762814353916*^9, 3.8587628143569174`*^9}, {
   3.8587634297137833`*^9, 3.8587634394408445`*^9}, 3.858763522832363*^9},
 CellLabel->
  "In[151]:=",ExpressionUUID->"5e6729df-7509-48c0-ad08-1e6002b1edfd"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.}, {5., 0.}, {6., 0.}, {7.,
       0.0625}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Total\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 0.0625}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.858763441147561*^9, 3.8587635331810055`*^9, 
  3.8587638089526267`*^9},
 CellLabel->
  "Out[151]=",ExpressionUUID->"7afa1620-0e96-4c60-9db6-70ee65513d39"],

Cell["\<\
(RANDOM) Total \:0432\:0441\:0435 \:0435\:0449\:0435 \:0431\:044b\:0441\:0442\
\:0440\:0435\:0435. \:041d\:041e! \:041e\:0442\:043d\:043e\:0441\:0438\:0442\
\:0435\:043b\:044c\:043d\:043e (RANGE) \:043e\:043d \:043c\:0435\:0434\:043b\
\:0435\:043d\:043d\:0435\:0435.
\
\>", "Text",
 CellChangeTimes->{{3.858763452806149*^9, 
  3.858763491001603*^9}},ExpressionUUID->"f0a2cf38-8e90-496b-bb5b-\
1593c3a537c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{
        StyleBox[
         RowBox[{
          StyleBox["f",
           FontWeight->"Bold"], "Do"}]], "[", 
        StyleBox[
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"n", "*", "x"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}],
         FontWeight->"Bold"], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Do\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8587635337702436`*^9, 3.8587635525036173`*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"faf17506-878e-4bf2-815b-88aff2674c7a"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.015625}, {5., 0.203125}, {
      6., 1.953125}, {6.170454545454546, 4.8828125}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Do\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 4.8828125}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8587635758758764`*^9, 3.8587638306010723`*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"04ef1ac3-c5dc-4cfa-8ccb-36af413fe486"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       StyleBox["Timing",
        FontWeight->"Bold"], 
       StyleBox["[",
        FontWeight->"Bold"], 
       RowBox[{"fApply", "[", 
        StyleBox[
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"n", "*", "x"}], ",", 
           RowBox[{"{", "n", "}"}]}], "]"}],
         FontWeight->"Bold"], "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", 
       RowBox[{"{", 
        RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Samples count\>\"", ",", " ", "\"\<T\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "->", "\"\<Apply\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8587635688353877`*^9, 3.858763582795138*^9}},
 CellLabel->
  "In[153]:=",ExpressionUUID->"0feaced6-acd2-400e-9dd0-10bba9934d44"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.015625}, {5., 0.109375}, {
      6., 1.046875}, {6.173875432525952, 2.6171875}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Samples count\"", TraditionalForm], 
    FormBox["\"T\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Apply\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 2.6171875}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8587635968517294`*^9, 3.8587638422367826`*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"cc4da105-3191-4f75-9b67-b1f521a923f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ListLinePlot", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        StyleBox["Timing",
         FontWeight->"Bold"], 
        StyleBox["[",
         FontWeight->"Bold"], 
        RowBox[{"fTotal", "[", 
         StyleBox[
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"n", "*", "x"}], ",", 
            RowBox[{"{", "n", "}"}]}], "]"}],
          FontWeight->"Bold"], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", 
        RowBox[{"{", 
         RowBox[{"10", "^", "i"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "7"}], "}"}]}], "]"}], ",", 
    RowBox[{"AxesLabel", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Number of samples 10^i\>\"", ",", " ", "\"\<Time\>\""}], 
      "}"}]}], ",", 
    RowBox[{"PlotLabel", "->", "\"\<SymbolsList Total\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.858763591670595*^9, 3.8587636070983214`*^9}, {
  3.858763662615094*^9, 3.858763698351541*^9}},
 CellLabel->
  "In[154]:=",ExpressionUUID->"2d1fb852-54ae-4cb0-a201-3b40cc8b9f9f"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[{{1., 0.}, {2., 0.}, {3., 0.}, {4., 0.015625}, {5., 0.09375}, {
      6., 1.015625}, {6.167525773195877, 2.5390625}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"Number of samples 10^i\"", TraditionalForm], 
    FormBox["\"Time\"", TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"SymbolsList Total\"", TraditionalForm],
  PlotRange->{{0., 7.}, {0, 2.5390625}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.858763621648597*^9, {3.858763687924633*^9, 3.858763712467942*^9}, 
   3.858763853996643*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"2ecacd50-382c-4945-b3db-d7aa1819bcfc"]
}, Open  ]],

Cell["\<\
(LIST)  Total \:0432\:0441\:0435 \:0435\:0449\:0435 \:0441\:0430\:043c\:044b\
\:0439 \:0431\:044b\:0441\:0442\:0440\:044b\:0439, \:043d\:043e \:043c\:0435\
\:0434\:043b\:0435\:043d\:043d\:0435\:0435 \:043e\:0442\:043d\:043e\:0441\
\:0438\:0442\:0435\:043b\:044c\:043d\:043e (RANDOM)
Total RANGE - fastest!\
\>", "Text",
 CellChangeTimes->{{3.858763647229667*^9, 3.8587636557870255`*^9}, {
  3.858763707764491*^9, 
  3.85876377958018*^9}},ExpressionUUID->"e23767ba-7c0e-471f-8b03-\
da9f2e5e2179"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2. \:041f\:0440\:0438\:043c\:0435\:043d\:0435\:043d\:0438\:0435 \:0444\
\:0443\:043d\:043a\:0446\:0438\:0439 \:043a \:0441\:043f\:0438\:0441\:043a\
\:0430\:043c", "Section",
 CellChangeTimes->{{3.857508041599079*^9, 
  3.857508041766377*^9}},ExpressionUUID->"3df5533c-9c4d-45e2-8eb4-\
484940778d41"],

Cell[TextData[StyleBox["\:0412 \:0434\:0430\:043d\:043d\:043e\:043c \:0437\
\:0430\:0434\:0430\:043d\:0438\:0438 \:043d\:0435 \:0438\:0441\:043f\:043e\
\:043b\:044c\:0437\:0443\:0439\:0442\:0435 \:044f\:0432\:043d\:044b\:0435 \
\:0446\:0438\:043a\:043b\:044b \:0438\:043b\:0438 \:0434\:043e\:0441\:0442\
\:0443\:043f \:043a \:0438\:043d\:0434\:0435\:043a\:0441\:0430\:043c! \:041f\
\:043e\:0441\:0442\:0430\:0440\:0430\:0439\:0442\:0435\:0441\:044c \:043d\
\:0430\:0439\:0442\:0438 \:043f\:043e\:0434\:0445\:043e\:0434\:044f\:0449\
\:0443\:044e \:043a\:043e\:043d\:0441\:0442\:0440\:0443\:043a\:0446\:0438\
\:044e \:0432 \:0444\:0443\:043d\:043a\:0446\:0438\:043e\:043d\:0430\:043b\
\:044c\:043d\:043e\:043c \:043f\:043e\:0434\:0445\:043e\:0434\:0435 \:0438\
\:043b\:0438 \:0432\:0441\:0442\:0440\:043e\:0435\:043d\:043d\:0443\:044e \
\:0444\:0443\:043d\:043a\:0446\:0438\:044e",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.8575062397557087`*^9, 3.857506271874222*^9}, 
   3.857506397920649*^9, {3.8575080514474697`*^9, 3.857508065758263*^9}, {
   3.8575081322959538`*^9, 3.85750817554457*^9}, {3.857508223625085*^9, 
   3.857508273791728*^9}, {3.857508510218277*^9, 3.857508567065239*^9}, {
   3.857510898371751*^9, 3.8575108992598543`*^9}, {3.857513517728046*^9, 
   3.8575135179446373`*^9}, {3.857514331439324*^9, 
   3.857514345455701*^9}},ExpressionUUID->"7a4c38b4-67c8-41d9-bff6-\
593a89ee5a89"],

Cell[TextData[{
 "1) \:041d\:0430\:043f\:0438\:0448\:0438\:0442\:0435 \
\:0444\:0443\:043d\:043a\:0446\:0438\:044e, \:043d\:0430 \:0432\:0445\:043e\
\:0434 \:043a\:043e\:0442\:043e\:0440\:043e\:0439 \:043f\:043e\:0434\:0430\
\:044e\:0442\:0441\:044f \:0441\:043f\:0438\:0441\:043a\:0438 \:043e\:0434\
\:0438\:043d\:0430\:043a\:043e\:0432\:043e\:0439 \:0434\:043b\:0438\:043d\
\:044b: \:0441\:043d\:0430\:0447\:0430\:043b\:0430 \:0438\:0434\:0443\:0442 \
\:0441\:043f\:0438\:0441\:043a\:0438 \:0437\:043d\:0430\:0447\:0435\:043d\
\:0438\:0439 (\:043e\:0434\:0438\:043d \:0438\:043b\:0438 \:043d\:0435\:0441\
\:043a\:043e\:043b\:044c\:043a\:043e), \:043f\:043e\:0441\:043b\:0435\:0434\
\:043d\:0438\:043c \:0432\:0441\:0435\:0433\:0434\:0430 \:0438\:0434\:0435\
\:0442 \:0441\:043f\:0438\:0441\:043e\:043a \:043c\:0435\:0442\:043e\:043a. \
\:0424\:0443\:043d\:043a\:0446\:0438\:044f \:0434\:043e\:043b\:0436\:043d\
\:0430 \:0441\:0444\:043e\:0440\:043c\:0438\:0440\:043e\:0432\:0430\:0442\
\:044c \:0441\:043f\:0438\:0441\:043e\:043a \:043f\:0440\:0430\:0432\:0438\
\:043b (",
 StyleBox["Rule, \[Rule]",
  FontWeight->"Bold"],
 ") \:0438\:0437 \:0441\:043f\:0438\:0441\:043a\:0430 \
\:0437\:043d\:0430\:0447\:0435\:043d\:0438\:0439 \:0432 \:0441\:043f\:0438\
\:0441\:043e\:043a \:043c\:0435\:0442\:043e\:043a. ",
 StyleBox["(\:044d\:0442\:0443 \:0444\:0443\:043d\:043a\:0446\:0438\:044e \
\:043c\:043e\:0436\:043d\:043e \:0431\:0443\:0434\:0435\:0442 \:0438\:0441\
\:043f\:043e\:043b\:044c\:0437\:043e\:0432\:0430\:0442\:044c \:0432 \:0441\
\:0430\:043c\:043e\:043c \:043f\:043e\:0441\:043b\:0435\:0434\:043d\:0435\
\:043c \:043f\:0443\:043d\:043a\:0442\:0435 \:0437\:0430\:0434\:0430\:0447\
\:0438 \:043f\:0440\:043e \:0422\:0438\:0442\:0430\:043d\:0438\:043a \:043d\
\:0438\:0436\:0435)",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.8575108091325407`*^9, 3.857510828923546*^9}, {
  3.857510879108554*^9, 3.857510894875093*^9}, {3.857511062834762*^9, 
  3.85751118586756*^9}, {3.857511246364036*^9, 3.8575113853541927`*^9}, {
  3.8575116516670732`*^9, 3.857511756986207*^9}, {3.8575128733615723`*^9, 
  3.8575129391134443`*^9}, {3.857513184785678*^9, 3.857513186688596*^9}, {
  3.85751621038101*^9, 
  3.857516212389164*^9}},ExpressionUUID->"2839ccbb-e8e5-4721-8b5a-\
54619ea93687"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.9", ",", "0.1", ",", "0.2"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "a", ",", "0.9"}], "}"}], "\[Rule]", "1"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", ",", "b", ",", "0.1"}], "}"}], "\[Rule]", "2"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"z", ",", "c", ",", "0.2"}], "}"}], "\[Rule]", "3"}]}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", "x", "}"}], "\[Rule]", "1"}], ",", 
    RowBox[{
     RowBox[{"{", "y", "}"}], "\[Rule]", "2"}], ",", 
    RowBox[{
     RowBox[{"{", "z", "}"}], "\[Rule]", "3"}]}], "}"}]}]}], "DisplayFormula",\

 CellChangeTimes->{{3.6971551084904423`*^9, 3.6971551814165277`*^9}, {
   3.6971562347106943`*^9, 3.69715630052617*^9}, {3.6971563696130714`*^9, 
   3.6971563754371653`*^9}, {3.697156587075489*^9, 3.6971566147631836`*^9}, {
   3.6971568779609957`*^9, 3.69715688165635*^9}, {3.6971570988943825`*^9, 
   3.697157100062723*^9}, 3.6971581359411125`*^9, 3.731367513546907*^9, {
   3.8575109170915213`*^9, 3.857510941690823*^9}, {3.857511014611993*^9, 
   3.8575110608197727`*^9}, {3.857511097802965*^9, 3.857511104851882*^9}, {
   3.857511194275478*^9, 
   3.857511226651123*^9}},ExpressionUUID->"554fe09d-235b-4c59-b4ad-\
f0a6d1961f2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"g", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"Thread", "[", 
    RowBox[{"x", "->", "y"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.8587629015957317`*^9},
 CellLabel->
  "In[155]:=",ExpressionUUID->"3813e22d-a184-4ce8-a616-335eb0c943ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{3.858762910262386*^9},
 CellLabel->"In[97]:=",ExpressionUUID->"408b7ad7-025c-4608-b70e-8f37cd919615"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "\[Rule]", "1"}], ",", 
   RowBox[{"y", "\[Rule]", "2"}], ",", 
   RowBox[{"z", "\[Rule]", "3"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8587629115325127`*^9, 3.858762915422546*^9}},
 CellLabel->"Out[97]=",ExpressionUUID->"75ef699c-11ff-4abb-b900-0b62af5dcdb9"]
}, Open  ]],

Cell["\<\

2) \:041d\:0430 \:0432\:0445\:043e\:0434 \:043f\:043e\:0434\:0430\:0435\:0442\
\:0441\:044f \:0434\:0432\:0430 \:0441\:043f\:0438\:0441\:043a\:0430 (\:043d\
\:0435 \:043e\:0431\:044f\:0437\:0430\:0442\:0435\:043b\:044c\:043d\:043e \
\:043e\:0434\:0438\:043d\:0430\:043a\:043e\:0432\:043e\:0439 \:0434\:043b\
\:0438\:043d\:044b): \:0441\:043f\:0438\:0441\:043e\:043a \:0444\:0443\:043d\
\:043a\:0446\:0438\:0439 \:0438 \:0441\:043f\:0438\:0441\:043e\:043a \:043f\
\:0435\:0440\:0435\:043c\:0435\:043d\:043d\:044b\:0445. \:041d\:0430\:043f\
\:0438\:0448\:0438\:0442\:0435 \:0444\:0443\:043d\:043a\:0446\:0438\:044e, \
\:043a\:043e\:0442\:043e\:0440\:0430\:044f \:0431\:044b \:0432\:044b\:0434\
\:0430\:0432\:0430\:043b\:0430 \:043c\:0430\:0442\:0440\:0438\:0446\:0443 \
\:043d\:0435\:043e\:043f\:0440\:0435\:0434\:0435\:043b\:0435\:043d\:043d\:044b\
\:0445 \:043f\:0435\:0440\:0432\:044b\:0445 \:0438\:043d\:0442\:0435\:0433\
\:0440\:0430\:043b\:043e\:0432 \:043f\:043e \:044d\:0442\:0438\:043c \:043f\
\:0435\:0440\:0435\:043c\:0435\:043d\:043d\:044b\:043c. \:041f\:0440\:0438\
\:043c\:0435\:0440 \:0434\:043b\:044f \:0434\:0432\:0443\:0445 \:0444\:0443\
\:043d\:043a\:0446\:0438\:0439 \:0438 \:0434\:0432\:0443\:0445 \:043f\:0435\
\:0440\:0435\:043c\:0435\:043d\:043d\:044b\:0445\
\>", "Text",
 CellChangeTimes->{{3.857508780314218*^9, 3.8575088083219633`*^9}, {
   3.8575088529617243`*^9, 3.8575088713058767`*^9}, {3.857508934898292*^9, 
   3.857508954666294*^9}, {3.857513190041094*^9, 3.857513192032938*^9}, 
   3.8575137939439573`*^9, {3.857514430431821*^9, 3.8575144654079123`*^9}, {
   3.8575145272062483`*^9, 3.8575145372550364`*^9}, {3.857514714230233*^9, 
   3.857514733631328*^9}, {3.8575147882313128`*^9, 3.857514798512321*^9}, {
   3.857514914879421*^9, 3.857514944374606*^9}, {3.857515412344283*^9, 
   3.857515423485846*^9}, {3.8575159053896217`*^9, 
   3.8575159204290524`*^9}},ExpressionUUID->"c89d0e47-b4ee-4bc7-993a-\
afba18bd3a50"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"h", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         SubscriptBox["f", "1"], ",", " ", 
         SubscriptBox["f", "2"]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"x", ",", " ", "y"}], "}"}]}]}], "}"}], "]"}], "=", 
   RowBox[{"(", GridBox[{
      {
       RowBox[{"\[Integral]", 
        RowBox[{
         SubscriptBox["f", "1"], 
         RowBox[{"\[DifferentialD]", "x", " "}]}]}], 
       RowBox[{"\[Integral]", 
        RowBox[{
         SubscriptBox["f", "1"], 
         RowBox[{"\[DifferentialD]", "y"}]}]}]},
      {
       RowBox[{"\[Integral]", 
        RowBox[{
         SubscriptBox["f", "2"], 
         RowBox[{"\[DifferentialD]", "x", " "}]}]}], 
       RowBox[{"\[Integral]", 
        RowBox[{
         SubscriptBox["f", "2"], 
         RowBox[{"\[DifferentialD]", "y", " "}]}]}]}
     }], ")"}]}], ","}]], "DisplayFormula",
 CellChangeTimes->{{3.6971566619789314`*^9, 3.697156766074768*^9}, {
   3.6971568466742735`*^9, 3.697156857056476*^9}, {3.697156918631978*^9, 
   3.6971569268715982`*^9}, {3.697157085566374*^9, 3.697157156925763*^9}, 
   3.6971581379409456`*^9, 3.731367518595104*^9, {3.857508820506074*^9, 
   3.857508821074354*^9}, {3.8575145163047953`*^9, 3.857514523294681*^9}, {
   3.857514602679605*^9, 3.857514627560141*^9}, {3.857514668712343*^9, 
   3.857514689682458*^9}, {3.857514752208912*^9, 3.857514777191956*^9}, {
   3.857515436014752*^9, 
   3.857515498662569*^9}},ExpressionUUID->"79288e38-87c7-4666-82f9-\
b400f0d1f701"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"h", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Outer", "[", 
     RowBox[{"Integrate", ",", "x", ",", " ", "y"}], "]"}], "//", 
    "MatrixForm"}]}], ";"}]], "Input",
 CellChangeTimes->{3.8587629248667746`*^9},
 CellLabel->
  "In[156]:=",ExpressionUUID->"99096d3b-3588-4f6a-a4e5-b613bdd44f83"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.858762931373784*^9, 3.8587629317050805`*^9}, {
  3.858762963605543*^9, 
  3.8587629640666475`*^9}},ExpressionUUID->"f184d8a3-12d8-4d6b-a14c-\
d5fa07cab506"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8587629670342193`*^9, 
  3.858762970934187*^9}},ExpressionUUID->"4aa5c487-8980-4d59-8f06-\
f534fec8863e"],

Cell[TextData[{
 "3) \:041d\:0430\:043f\:0438\:0448\:0438\:0442\:0435 \
\:0444\:0443\:043d\:043a\:0446\:0438\:044e \:0434\:043b\:044f \:0432\:044b\
\:0447\:0438\:0441\:043b\:0435\:043d\:0438\:044f \:0434\:0438\:0432\:0435\
\:0440\:0433\:0435\:043d\:0446\:0438\:0438 (\:0430\:043d\:0430\:043b\:043e\
\:0433 \:0432\:0441\:0442\:0440\:043e\:0435\:043d\:043d\:043e\:0439 \:0444\
\:0443\:043d\:043a\:0446\:0438\:0438 ",
 StyleBox["Div", "Code"],
 ") \:043d\:0430 \:0432\:0445\:043e\:0434 \
\:043f\:043e\:0434\:0430\:0435\:0442\:0441\:044f \:0434\:0432\:0430 \:0441\
\:043f\:0438\:0441\:043a\:0430 \:043e\:0434\:0438\:043d\:0430\:043a\:043e\
\:0432\:043e\:0439 \:0434\:043b\:0438\:043d\:044b: \:0441\:043f\:0438\:0441\
\:043e\:043a \:0444\:0443\:043d\:043a\:0446\:0438\:0439 \:0438 \:0441\:043f\
\:0438\:0441\:043e\:043a \:043f\:0435\:0440\:0435\:043c\:0435\:043d\:043d\
\:044b\:0445."
}], "Text",
 CellChangeTimes->{{3.857513368147664*^9, 3.857513369895492*^9}, {
  3.857516073716741*^9, 3.857516086844886*^9}, {3.857516165824279*^9, 
  3.85751618064485*^9}},ExpressionUUID->"044b627f-beaa-4aa7-8039-\
086a6c7946f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"div", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["f", "1"], ",", " ", 
       SubscriptBox["f", "2"]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", "y"}], "}"}]}], "]"}], "=", 
   RowBox[{
    FractionBox[
     RowBox[{"\[PartialD]", 
      SubscriptBox["f", "1"]}], 
     RowBox[{"\[PartialD]", "x"}]], "+", 
    FractionBox[
     RowBox[{"\[PartialD]", 
      SubscriptBox["f", "2"]}], 
     RowBox[{"\[PartialD]", "y"}]]}]}], 
  "\[LineSeparator]"}]], "DisplayFormula",
 CellChangeTimes->{{3.6971566619789314`*^9, 3.697156766074768*^9}, {
   3.6971568466742735`*^9, 3.697156857056476*^9}, {3.697156918631978*^9, 
   3.6971569268715982`*^9}, {3.697157085566374*^9, 3.697157156925763*^9}, 
   3.6971581379409456`*^9, 3.731367518595104*^9, {3.857508820506074*^9, 
   3.857508821074354*^9}, {3.8575145163047953`*^9, 3.857514523294681*^9}, {
   3.857514602679605*^9, 3.857514627560141*^9}, {3.857514668712343*^9, 
   3.857514689682458*^9}, {3.857514752208912*^9, 3.857514777191956*^9}, {
   3.857515436014752*^9, 3.857515498662569*^9}, {3.8575160949016237`*^9, 
   3.857516144853034*^9}, 3.8575162449265223`*^9, 
   3.8587638128769197`*^9},ExpressionUUID->"29605dc5-e2cb-4365-bf0d-\
5b35b2f8c7f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"div", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
   RowBox[{"Total", "[", 
    RowBox[{"Diagonal", "[", 
     RowBox[{"D", "[", 
      RowBox[{"x", ",", 
       RowBox[{"{", "y", "}"}]}], "]"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.858762940529236*^9},
 CellLabel->
  "In[100]:=",ExpressionUUID->"9a0e7a70-b820-4621-a287-2851aa8e0d07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3. \[OpenCurlyDoubleQuote]\:0422\:0438\:0442\:0430\:043d\:0438\:043a\
\[CloseCurlyDoubleQuote]", "Section",
 CellChangeTimes->{{3.8575128453206263`*^9, 
  3.8575128454961443`*^9}},ExpressionUUID->"0f5ed4b1-53e1-4585-81ce-\
f32698b5389f"],

Cell[TextData[{
 "1) \:0414\:0430\:043d\:043d\:044b\:0435 \:043e \:043f\:0430\:0441\:0441\
\:0430\:0436\:0438\:0440\:0430\:0445 \:0445\:0440\:0430\:043d\:044f\:0442\
\:0441\:044f \:0432 \:0432\:0438\:0434\:0435 csv \:0444\:0430\:0439\:043b\
\:0430 (titanic.csv). C\:043e\:0445\:0440\:0430\:043d\:0438\:0442\:0435 \
\:0435\:0433\:043e \:0432 \:0434\:0438\:0440\:0435\:043a\:0442\:043e\:0440\
\:0438\:0438 \:0441 \:043d\:043e\:0443\:0442\:0431\:0443\:043a\:043e\:043c \
\:0438 \:0437\:0430\:0433\:0440\:0443\:0437\:0438\:0442\:0435 \:0434\:0430\
\:043d\:043d\:044b\:0435 \:0441 \:043f\:043e\:043c\:043e\:0449\:044c\:044e \
\:0444\:0443\:043d\:043a\:0446\:0438\:0438 ",
 StyleBox["Import:", "Code"]
}], "Text",
 CellChangeTimes->{{3.857509797914027*^9, 3.857509809103755*^9}, {
  3.857512261401937*^9, 
  3.857512261561637*^9}},ExpressionUUID->"88452167-4b24-4552-a369-\
7ef27d687735"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:0447\:0442\:043e\:0431\:044b", " ", 
     "\:0437\:0430\:0433\:0440\:0443\:0436\:0430\:0442\:044c", " ", 
     "\:0444\:0430\:0439\:043b", " ", "\:0438\:0437", " ", 
     "\:0434\:0438\:0440\:0435\:043a\:0442\:043e\:0440\:0438\:0438"}], ",", 
    " ", 
    RowBox[{
    "\:0432", " ", "\:043a\:043e\:0442\:043e\:0440\:043e\:0439", " ", 
     "\:043d\:0430\:0445\:043e\:0434\:0438\:0442\:0441\:044f", " ", 
     "\:043d\:043e\:0443\:0442\:0431\:0443\:043a"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Import", "[", "\"\<titanic.csv\>\"", "]"}]}]}], "Input",
 CellChangeTimes->{{3.697147607427901*^9, 3.6971476129617004`*^9}, {
   3.697147674017377*^9, 3.697147683177775*^9}, 3.6971478578475523`*^9, {
   3.6971541852988033`*^9, 3.6971541862509856`*^9}, {3.697157645976962*^9, 
   3.697157654969296*^9}, 3.6971576874168115`*^9, {3.697157890230853*^9, 
   3.6971579080066547`*^9}, {3.6971580052455235`*^9, 
   3.6971581119246025`*^9}, {3.69715817487646*^9, 3.6971581931799912`*^9}, 
   3.8587611107772336`*^9},
 CellLabel->
  "In[157]:=",ExpressionUUID->"78239c94-fe66-4961-af4b-55f081afbf31"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            
            RowBox[{"\<\"PassengerId\"\>", ",", "\<\"Survived\"\>", 
             ",", "\<\"Pclass\"\>", ",", "\<\"Name\"\>", ",", "\<\"Sex\"\>", 
             ",", "\<\"Age\"\>", ",", "\<\"SibSp\"\>", ",", "\<\"Parch\"\>", 
             ",", "\<\"Ticket\"\>", ",", "\<\"Fare\"\>", ",", "\<\"Cabin\"\>",
              ",", "\<\"Embarked\"\>"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "1", ",", "0", ",", "3", ",", "\<\"Braund, Mr. Owen Harris\"\>", 
             ",", "\<\"male\"\>", ",", "22", ",", "1", ",", "0", 
             ",", "\<\"A/5 21171\"\>", ",", "7.25`", ",", "\<\"\"\>", 
             ",", "\<\"S\"\>"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "2", ",", "1", ",", "1", 
             ",", "\<\"Cumings, Mrs. John Bradley (Florence Briggs \
Thayer)\"\>", ",", "\<\"female\"\>", ",", "38", ",", "1", ",", "0", 
             ",", "\<\"PC 17599\"\>", ",", "71.2833`", ",", "\<\"C85\"\>", 
             ",", "\<\"C\"\>"}], "}"}], ",", 
           TemplateBox[{"887"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{"{", 
            RowBox[{
            "890", ",", "1", ",", "1", ",", "\<\"Behr, Mr. Karl Howell\"\>", 
             ",", "\<\"male\"\>", ",", "26", ",", "0", ",", "0", ",", 
             "111369", ",", "30", ",", "\<\"C148\"\>", ",", "\<\"C\"\>"}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
            "891", ",", "0", ",", "3", ",", "\<\"Dooley, Mr. Patrick\"\>", 
             ",", "\<\"male\"\>", ",", "32", ",", "0", ",", "0", ",", 
             "370376", ",", "7.75`", ",", "\<\"\"\>", ",", "\<\"Q\"\>"}], 
            "}"}]}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{68.89394218381494, {3., 10.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{55.838669339194894`, {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 158, 21617670229376603638, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{65.43017280986533, {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 158, 21617670229376603638, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{48.29589624423534, {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 158, 21617670229376603638, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{83.62265245243907, {1., 10.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[21617670229376603638 === $SessionID, 
   Out[158], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.858761112402111*^9, 3.858763854214692*^9},
 CellLabel->
  "Out[158]=",ExpressionUUID->"72f071b9-4882-4473-8e2d-57e247614225"]
}, Open  ]],

Cell["\<\
\:041e\:0431\:0440\:0430\:0442\:0438\:0442\:0435 \:0432\:043d\:0438\:043c\
\:0430\:043d\:0438\:0435, \:0447\:0442\:043e \:0434\:0430\:043d\:043d\:044b\
\:0435 data \:043e\:043a\:0430\:0436\:0443\:0442\:0441\:044f \:0432 \:0432\
\:0438\:0434\:0435 \:0441\:043f\:0438\:0441\:043a\:0430 \:0441\:043f\:0438\
\:0441\:043a\:043e\:0432 (~\:0442\:0430\:0431\:043b\:0438\:0446\:044b).\
\>", "Text",
 CellChangeTimes->{
  3.857509802512293*^9, {3.857510573132044*^9, 
   3.857510574762988*^9}},ExpressionUUID->"bf15711e-b189-4afb-abe2-\
e7253b2b5d8f"],

Cell["2) \:0412\:044b\:0432\:0435\:0434\:0438\:0442\:0435 \:0437\:0430\:0433\
\:043e\:043b\:043e\:0432\:043a\:0438 \:0441\:0442\:043e\:043b\:0431\:0446\
\:043e\:0432", "Text",
 CellChangeTimes->{{3.6971493650378847`*^9, 3.6971493861768856`*^9}, {
  3.6971512947027545`*^9, 3.6971512956867375`*^9}, {3.85751226350537*^9, 
  3.857512263572072*^9}},ExpressionUUID->"5728765a-6383-4f7d-8bca-\
21a591bdc71a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.858761120052266*^9, 3.858761133458336*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"28d2c508-189c-4fcb-b936-7c0ca46ef750"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"PassengerId\"\>", ",", "\<\"Survived\"\>", 
   ",", "\<\"Pclass\"\>", ",", "\<\"Name\"\>", ",", "\<\"Sex\"\>", 
   ",", "\<\"Age\"\>", ",", "\<\"SibSp\"\>", ",", "\<\"Parch\"\>", 
   ",", "\<\"Ticket\"\>", ",", "\<\"Fare\"\>", ",", "\<\"Cabin\"\>", 
   ",", "\<\"Embarked\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8587611260686207`*^9, 3.858761134134571*^9}, 
   3.8587638542927094`*^9},
 CellLabel->
  "Out[159]=",ExpressionUUID->"0d275b92-30c1-48c2-b4dd-2321e26a6b07"]
}, Open  ]],

Cell["3) \:0414\:0430\:043d\:043d\:044b\:0435 \:043e \:0441\:043a\:043e\:043b\
\:044c\:043a\:0438\:0445 \:043f\:0430\:0441\:0441\:0430\:0436\:0438\:0440\
\:043e\:0432 \:0443 \:0432\:0430\:0441 \:0438\:043c\:0435\:044e\:0442\:0441\
\:044f?", "Text",
 CellChangeTimes->{{3.6971483132358046`*^9, 3.6971483692669296`*^9}, {
   3.6971493521706057`*^9, 3.697149362898301*^9}, {3.697151297975164*^9, 
   3.6971512984307194`*^9}, {3.6971579195907555`*^9, 3.69715792055166*^9}, {
   3.85751226500173*^9, 3.8575122651456213`*^9}, 
   3.8587611926963096`*^9},ExpressionUUID->"74440e91-c1b3-4379-a7d3-\
ae595b4d93fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", "data", "]"}], "-", "1"}]], "Input",
 CellChangeTimes->{3.858761196345275*^9},
 CellLabel->
  "In[160]:=",ExpressionUUID->"d0d91344-9134-466c-b87f-bed051e9b93c"],

Cell[BoxData["891"], "Output",
 CellChangeTimes->{3.8587611972163095`*^9, 3.8587638543637257`*^9},
 CellLabel->
  "Out[160]=",ExpressionUUID->"eb11eb4f-2628-4680-99fe-e2f205280ff7"]
}, Open  ]],

Cell["\<\
4) \:0421\:043e\:0445\:0440\:0430\:043d\:0438\:0442\:0435 \:0434\:0430\:043d\
\:043d\:044b\:0435 \:0441\:0442\:043e\:043b\:0431\:0446\:043e\:0432 \
\"Pclass\", \"Sex\", \"Age\" \:0438 \
\:043e\:0442\:043c\:0435\:0442\:043a\:0438 \[OpenCurlyDoubleQuote]Survived\
\[CloseCurlyDoubleQuote] \:0432 \:0432\:0438\:0434\:0435 \:043e\:0442\:0434\
\:0435\:043b\:044c\:043d\:044b\:0445  \:043f\:0435\:0440\:0435\:043c\:0435\
\:043d\:043d\:044b\:0445 - \:0441\:043f\:0438\:0441\:043a\:043e\:0432, \:0441 \
\:043a\:043e\:0442\:043e\:0440\:044b\:043c\:0438 \:0431\:0443\:0434\:0435\
\:0442 \:0443\:0434\:043e\:0431\:043d\:0435\:0435 \:0440\:0430\:0431\:043e\
\:0442\:0430\:0442\:044c \:0432 \:0434\:0430\:043b\:044c\:043d\:0435\:0439\
\:0448\:0435\:043c.\
\>", "Text",
 CellChangeTimes->{{3.69714848167413*^9, 3.6971485513783636`*^9}, 
   3.697149431689157*^9, {3.697149873780884*^9, 3.697149920933922*^9}, {
   3.697150681238617*^9, 3.697150707509714*^9}, {3.6971513018965316`*^9, 
   3.697151302344821*^9}, {3.6971582119808064`*^9, 3.6971582133422174`*^9}, {
   3.857512266433729*^9, 3.85751226659374*^9}, {3.857512298332159*^9, 
   3.857512306160993*^9}},ExpressionUUID->"1ddc0c67-0de1-4337-99e4-\
556af1c57098"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"pclass", " ", "=", " ", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"2", ";;"}], ",", "3"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"sex", " ", "=", " ", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"2", ";;"}], ",", "5"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"age", " ", "=", " ", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"2", ";;"}], ",", "6"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"survived", " ", "=", " ", 
  RowBox[{"data", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"2", ";;"}], ",", "2"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.858761275480913*^9, 3.858761285441196*^9}, {
  3.8587613405883303`*^9, 3.8587613620243163`*^9}, {3.858761415235237*^9, 
  3.858761452034278*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"6cca6fe5-826a-4cdf-bcdf-d1f0bd615ee0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", 
   "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", 
   ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", 
   "1", ",", "1", ",", "3", ",", "2", ",", "1", ",", "1", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", 
   "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", 
   ",", "2", ",", "1", ",", "1", ",", "2", ",", "3", ",", "2", ",", "3", ",", 
   "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "3", ",", "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", 
   "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "1", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", 
   "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", 
   ",", "2", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", ",", "1", ",", "3", ",", 
   "2", ",", "3", ",", "2", ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", ",", "2", ",", 
   "2", ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "2", ",", "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", 
   "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", 
   "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", 
   ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "2", ",", "3", ",", 
   "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "1", 
   ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", 
   "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", 
   "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", 
   ",", "1", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", 
   "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", 
   ",", "3", ",", "2", ",", "3", ",", "2", ",", "2", ",", "2", ",", "2", ",", 
   "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", 
   ",", "1", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "3", ",", "1", 
   ",", "1", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", "1", ",", 
   "1", ",", "3", ",", "2", ",", "1", ",", "3", ",", "1", ",", "3", ",", "2", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", 
   "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "1", ",", "1", ",", "2", 
   ",", "3", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1", ",", "1", ",", 
   "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "1", ",", "1", ",", "1", 
   ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "2", ",", 
   "3", ",", "2", ",", "2", ",", "1", ",", "1", ",", "3", ",", "3", ",", "2", 
   ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "1", ",", 
   "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1", 
   ",", "3", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "2", ",", 
   "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "3", ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", ",", 
   "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "1", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", 
   "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", 
   ",", "1", ",", "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "2", ",", 
   "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", 
   ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", 
   "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", 
   ",", "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", "2", ",", "3", ",", 
   "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", ",", "2", 
   ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "1", ",", 
   "1", ",", "3", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", 
   ",", "2", ",", "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "1", ",", 
   "2", ",", "3", ",", "1", ",", "1", ",", "3", ",", "3", ",", "1", ",", "1", 
   ",", "2", ",", "3", ",", "1", ",", "3", ",", "1", ",", "2", ",", "3", ",", 
   "3", ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", 
   ",", "2", ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", ",", "3", ",", 
   "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", "1", ",", "1", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "1", ",", "3", ",", 
   "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "2", ",", "3", 
   ",", "2", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", 
   "3", ",", "2", ",", "1", ",", "3", ",", "2", ",", "2", ",", "3", ",", "3", 
   ",", "3", ",", "3", ",", "2", ",", "1", ",", "1", ",", "3", ",", "1", ",", 
   "1", ",", "3", ",", "3", ",", "2", ",", "1", ",", "1", ",", "2", ",", "2", 
   ",", "3", ",", "2", ",", "1", ",", "2", ",", "3", ",", "3", ",", "3", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", 
   "2", ",", "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "1", 
   ",", "3", ",", "3", ",", "2", ",", "1", ",", "2", ",", "1", ",", "3", ",", 
   "1", ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", 
   "2", ",", "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", 
   ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", 
   "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "3", ",", 
   "1", ",", "3", ",", "1", ",", "1", ",", "3", ",", "2", ",", "3", ",", "2", 
   ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", 
   "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", 
   ",", "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "2", ",", "1", ",", 
   "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", 
   ",", "3", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "2", ",", 
   "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "1", ",", "3", 
   ",", "3", ",", "2", ",", "2", ",", "3", ",", "3", ",", "3", ",", "1", ",", 
   "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", 
   ",", "1", ",", "3", ",", "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", 
   "2", ",", "2", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1", ",", "1", 
   ",", "3", ",", "2", ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", ",", 
   "2", ",", "3", ",", "2", ",", "2", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", "2", ",", "2", ",", 
   "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "1", ",", "1", 
   ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", ",", "1", ",", "3", ",", 
   "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", ",", "2", 
   ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", 
   "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", ",", "2", 
   ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", 
   "3", ",", "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", 
   "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "2", ",", "1", 
   ",", "3", ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", ",", "1", ",", 
   "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", ",", "3", ",", "2", 
   ",", "3", ",", "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", 
   "3", ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", ",", "1", ",", "2", ",", 
   "3", ",", "1", ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "1", 
   ",", "3", ",", "2", ",", "2", ",", "2", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "1", ",", "1", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", 
   ",", "3", ",", "1", ",", "2", ",", "3", ",", "3", ",", "2", ",", "3", ",", 
   "3", ",", "2", ",", "1", ",", "3", ",", "1", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.858761459328237*^9, 3.8587629824684844`*^9, 
  3.858763854440743*^9},
 CellLabel->
  "Out[161]=",ExpressionUUID->"26413dd4-7250-4264-ac54-b93c7bf07f48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"female\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"male\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"female\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"female\"\>", 
   ",", "\<\"female\"\>", ",", "\<\"male\"\>", ",", "\<\"male\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.858761459328237*^9, 3.8587629824684844`*^9, 
  3.8587638544597483`*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"60d55274-2956-4356-a331-7a2e73f18b95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "22", ",", "38", ",", "26", ",", "35", ",", "35", ",", "\<\"\"\>", ",", 
   "54", ",", "2", ",", "27", ",", "14", ",", "4", ",", "58", ",", "20", ",", 
   "39", ",", "14", ",", "55", ",", "2", ",", "\<\"\"\>", ",", "31", 
   ",", "\<\"\"\>", ",", "35", ",", "34", ",", "15", ",", "28", ",", "8", ",",
    "38", ",", "\<\"\"\>", ",", "19", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", 
   "40", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "66", ",", "28", ",", "42", 
   ",", "\<\"\"\>", ",", "21", ",", "18", ",", "14", ",", "40", ",", "27", 
   ",", "\<\"\"\>", ",", "3", ",", "19", ",", "\<\"\"\>", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "18", ",", "7", ",", "21", ",", 
   "49", ",", "29", ",", "65", ",", "\<\"\"\>", ",", "21", ",", "28.5`", ",", 
   "5", ",", "11", ",", "22", ",", "38", ",", "45", ",", "4", ",", "\<\"\"\>",
    ",", "\<\"\"\>", ",", "29", ",", "19", ",", "17", ",", "26", ",", "32", 
   ",", "16", ",", "21", ",", "26", ",", "32", ",", "25", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "0.83`", ",", "30", ",", "22", ",", "29", 
   ",", "\<\"\"\>", ",", "28", ",", "17", ",", "33", ",", "16", 
   ",", "\<\"\"\>", ",", "23", ",", "24", ",", "29", ",", "20", ",", "46", 
   ",", "26", ",", "59", ",", "\<\"\"\>", ",", "71", ",", "23", ",", "34", 
   ",", "34", ",", "28", ",", "\<\"\"\>", ",", "21", ",", "33", ",", "37", 
   ",", "28", ",", "21", ",", "\<\"\"\>", ",", "38", ",", "\<\"\"\>", ",", 
   "47", ",", "14.5`", ",", "22", ",", "20", ",", "17", ",", "21", ",", 
   "70.5`", ",", "29", ",", "24", ",", "2", ",", "21", ",", "\<\"\"\>", ",", 
   "32.5`", ",", "32.5`", ",", "54", ",", "12", ",", "\<\"\"\>", ",", "24", 
   ",", "\<\"\"\>", ",", "45", ",", "33", ",", "20", ",", "47", ",", "29", 
   ",", "25", ",", "23", ",", "19", ",", "37", ",", "16", ",", "24", 
   ",", "\<\"\"\>", ",", "22", ",", "24", ",", "19", ",", "18", ",", "19", 
   ",", "27", ",", "9", ",", "36.5`", ",", "42", ",", "51", ",", "22", ",", 
   "55.5`", ",", "40.5`", ",", "\<\"\"\>", ",", "51", ",", "16", ",", "30", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "44", ",", "40", ",", "26", ",", 
   "17", ",", "1", ",", "9", ",", "\<\"\"\>", ",", "45", ",", "\<\"\"\>", ",",
    "28", ",", "61", ",", "4", ",", "1", ",", "21", ",", "56", ",", "18", 
   ",", "\<\"\"\>", ",", "50", ",", "30", ",", "36", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "9", ",", "1", ",", "4", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "45", ",", "40", ",", "36", ",", "32", ",", "19", 
   ",", "19", ",", "3", ",", "44", ",", "58", ",", "\<\"\"\>", ",", "42", 
   ",", "\<\"\"\>", ",", "24", ",", "28", ",", "\<\"\"\>", ",", "34", ",", 
   "45.5`", ",", "18", ",", "2", ",", "32", ",", "26", ",", "16", ",", "40", 
   ",", "24", ",", "35", ",", "22", ",", "30", ",", "\<\"\"\>", ",", "31", 
   ",", "27", ",", "42", ",", "32", ",", "30", ",", "16", ",", "27", ",", 
   "51", ",", "\<\"\"\>", ",", "38", ",", "22", ",", "19", ",", "20.5`", ",", 
   "18", ",", "\<\"\"\>", ",", "35", ",", "29", ",", "59", ",", "5", ",", 
   "24", ",", "\<\"\"\>", ",", "44", ",", "8", ",", "19", ",", "33", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "29", ",", "22", ",", "30", ",", 
   "44", ",", "25", ",", "24", ",", "37", ",", "54", ",", "\<\"\"\>", ",", 
   "29", ",", "62", ",", "30", ",", "41", ",", "29", ",", "\<\"\"\>", ",", 
   "30", ",", "35", ",", "50", ",", "\<\"\"\>", ",", "3", ",", "52", ",", 
   "40", ",", "\<\"\"\>", ",", "36", ",", "16", ",", "25", ",", "58", ",", 
   "35", ",", "\<\"\"\>", ",", "25", ",", "41", ",", "37", ",", "\<\"\"\>", 
   ",", "63", ",", "45", ",", "\<\"\"\>", ",", "7", ",", "35", ",", "65", ",",
    "28", ",", "16", ",", "19", ",", "\<\"\"\>", ",", "33", ",", "30", ",", 
   "22", ",", "42", ",", "22", ",", "26", ",", "19", ",", "36", ",", "24", 
   ",", "24", ",", "\<\"\"\>", ",", "23.5`", ",", "2", ",", "\<\"\"\>", ",", 
   "50", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "19", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "0.92`", ",", "\<\"\"\>", ",", "17", ",", "30", ",", 
   "30", ",", "24", ",", "18", ",", "26", ",", "28", ",", "43", ",", "26", 
   ",", "24", ",", "54", ",", "31", ",", "40", ",", "22", ",", "27", ",", 
   "30", ",", "22", ",", "\<\"\"\>", ",", "36", ",", "61", ",", "36", ",", 
   "31", ",", "16", ",", "\<\"\"\>", ",", "45.5`", ",", "38", ",", "16", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "29", ",", "41", ",", "45", ",", 
   "45", ",", "2", ",", "24", ",", "28", ",", "25", ",", "36", ",", "24", ",",
    "40", ",", "\<\"\"\>", ",", "3", ",", "42", ",", "23", ",", "\<\"\"\>", 
   ",", "15", ",", "25", ",", "\<\"\"\>", ",", "28", ",", "22", ",", "38", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "40", ",", "29", ",", "45", ",", 
   "35", ",", "\<\"\"\>", ",", "30", ",", "60", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "24", ",", "25", ",", "18", ",", "19", ",", "22", 
   ",", "3", ",", "\<\"\"\>", ",", "22", ",", "27", ",", "20", ",", "19", ",",
    "42", ",", "1", ",", "32", ",", "35", ",", "\<\"\"\>", ",", "18", ",", 
   "1", ",", "36", ",", "\<\"\"\>", ",", "17", ",", "36", ",", "21", ",", 
   "28", ",", "23", ",", "24", ",", "22", ",", "31", ",", "46", ",", "23", 
   ",", "28", ",", "39", ",", "26", ",", "21", ",", "28", ",", "20", ",", 
   "34", ",", "51", ",", "3", ",", "21", ",", "\<\"\"\>", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "33", ",", "\<\"\"\>", ",", "44", ",", "\<\"\"\>", 
   ",", "34", ",", "18", ",", "30", ",", "10", ",", "\<\"\"\>", ",", "21", 
   ",", "29", ",", "28", ",", "18", ",", "\<\"\"\>", ",", "28", ",", "19", 
   ",", "\<\"\"\>", ",", "32", ",", "28", ",", "\<\"\"\>", ",", "42", ",", 
   "17", ",", "50", ",", "14", ",", "21", ",", "24", ",", "64", ",", "31", 
   ",", "45", ",", "20", ",", "25", ",", "28", ",", "\<\"\"\>", ",", "4", ",",
    "13", ",", "34", ",", "5", ",", "52", ",", "36", ",", "\<\"\"\>", ",", 
   "30", ",", "49", ",", "\<\"\"\>", ",", "29", ",", "65", ",", "\<\"\"\>", 
   ",", "50", ",", "\<\"\"\>", ",", "48", ",", "34", ",", "47", ",", "48", 
   ",", "\<\"\"\>", ",", "38", ",", "\<\"\"\>", ",", "56", ",", "\<\"\"\>", 
   ",", "0.75`", ",", "\<\"\"\>", ",", "38", ",", "33", ",", "23", ",", "22", 
   ",", "\<\"\"\>", ",", "34", ",", "29", ",", "22", ",", "2", ",", "9", 
   ",", "\<\"\"\>", ",", "50", ",", "63", ",", "25", ",", "\<\"\"\>", ",", 
   "35", ",", "58", ",", "30", ",", "9", ",", "\<\"\"\>", ",", "21", ",", 
   "55", ",", "71", ",", "21", ",", "\<\"\"\>", ",", "54", ",", "\<\"\"\>", 
   ",", "25", ",", "24", ",", "17", ",", "21", ",", "\<\"\"\>", ",", "37", 
   ",", "16", ",", "18", ",", "33", ",", "\<\"\"\>", ",", "28", ",", "26", 
   ",", "29", ",", "\<\"\"\>", ",", "36", ",", "54", ",", "24", ",", "47", 
   ",", "34", ",", "\<\"\"\>", ",", "36", ",", "32", ",", "30", ",", "22", 
   ",", "\<\"\"\>", ",", "44", ",", "\<\"\"\>", ",", "40.5`", ",", "50", 
   ",", "\<\"\"\>", ",", "39", ",", "23", ",", "2", ",", "\<\"\"\>", ",", 
   "17", ",", "\<\"\"\>", ",", "30", ",", "7", ",", "45", ",", "30", 
   ",", "\<\"\"\>", ",", "22", ",", "36", ",", "9", ",", "11", ",", "32", ",",
    "50", ",", "64", ",", "19", ",", "\<\"\"\>", ",", "33", ",", "8", ",", 
   "17", ",", "27", ",", "\<\"\"\>", ",", "22", ",", "22", ",", "62", ",", 
   "48", ",", "\<\"\"\>", ",", "39", ",", "36", ",", "\<\"\"\>", ",", "40", 
   ",", "28", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "24", ",", "19", ",", 
   "29", ",", "\<\"\"\>", ",", "32", ",", "62", ",", "53", ",", "36", 
   ",", "\<\"\"\>", ",", "16", ",", "19", ",", "34", ",", "39", 
   ",", "\<\"\"\>", ",", "32", ",", "25", ",", "39", ",", "54", ",", "36", 
   ",", "\<\"\"\>", ",", "18", ",", "47", ",", "60", ",", "22", 
   ",", "\<\"\"\>", ",", "35", ",", "52", ",", "47", ",", "\<\"\"\>", ",", 
   "37", ",", "36", ",", "\<\"\"\>", ",", "49", ",", "\<\"\"\>", ",", "49", 
   ",", "24", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "44", ",", "35", ",", 
   "36", ",", "30", ",", "27", ",", "22", ",", "40", ",", "39", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "35", ",", "24", 
   ",", "34", ",", "26", ",", "4", ",", "26", ",", "27", ",", "42", ",", "20",
    ",", "21", ",", "21", ",", "61", ",", "57", ",", "21", ",", "26", 
   ",", "\<\"\"\>", ",", "80", ",", "51", ",", "32", ",", "\<\"\"\>", ",", 
   "9", ",", "28", ",", "32", ",", "31", ",", "41", ",", "\<\"\"\>", ",", 
   "20", ",", "24", ",", "2", ",", "\<\"\"\>", ",", "0.75`", ",", "48", ",", 
   "19", ",", "56", ",", "\<\"\"\>", ",", "23", ",", "\<\"\"\>", ",", "18", 
   ",", "21", ",", "\<\"\"\>", ",", "18", ",", "24", ",", "\<\"\"\>", ",", 
   "32", ",", "23", ",", "58", ",", "50", ",", "40", ",", "47", ",", "36", 
   ",", "20", ",", "32", ",", "25", ",", "\<\"\"\>", ",", "43", 
   ",", "\<\"\"\>", ",", "40", ",", "31", ",", "70", ",", "31", 
   ",", "\<\"\"\>", ",", "18", ",", "24.5`", ",", "18", ",", "43", ",", "36", 
   ",", "\<\"\"\>", ",", "27", ",", "20", ",", "14", ",", "60", ",", "25", 
   ",", "14", ",", "19", ",", "18", ",", "15", ",", "31", ",", "4", 
   ",", "\<\"\"\>", ",", "25", ",", "60", ",", "52", ",", "44", 
   ",", "\<\"\"\>", ",", "49", ",", "42", ",", "18", ",", "35", ",", "18", 
   ",", "25", ",", "26", ",", "39", ",", "45", ",", "42", ",", "22", 
   ",", "\<\"\"\>", ",", "24", ",", "\<\"\"\>", ",", "48", ",", "29", ",", 
   "52", ",", "19", ",", "38", ",", "27", ",", "\<\"\"\>", ",", "33", ",", 
   "6", ",", "17", ",", "34", ",", "50", ",", "27", ",", "20", ",", "30", 
   ",", "\<\"\"\>", ",", "25", ",", "25", ",", "29", ",", "11", 
   ",", "\<\"\"\>", ",", "23", ",", "23", ",", "28.5`", ",", "48", ",", "35", 
   ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "36", ",", "21", 
   ",", "24", ",", "31", ",", "70", ",", "16", ",", "30", ",", "19", ",", 
   "31", ",", "4", ",", "6", ",", "33", ",", "23", ",", "48", ",", "0.67`", 
   ",", "28", ",", "18", ",", "34", ",", "33", ",", "\<\"\"\>", ",", "41", 
   ",", "20", ",", "36", ",", "16", ",", "51", ",", "\<\"\"\>", ",", "30.5`", 
   ",", "\<\"\"\>", ",", "32", ",", "24", ",", "48", ",", "57", 
   ",", "\<\"\"\>", ",", "54", ",", "18", ",", "\<\"\"\>", ",", "5", 
   ",", "\<\"\"\>", ",", "43", ",", "13", ",", "17", ",", "29", 
   ",", "\<\"\"\>", ",", "25", ",", "25", ",", "18", ",", "8", ",", "1", ",", 
   "46", ",", "\<\"\"\>", ",", "16", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", 
   "25", ",", "39", ",", "49", ",", "31", ",", "30", ",", "30", ",", "34", 
   ",", "31", ",", "11", ",", "0.42`", ",", "27", ",", "31", ",", "39", ",", 
   "18", ",", "39", ",", "33", ",", "26", ",", "39", ",", "35", ",", "6", ",",
    "30.5`", ",", "\<\"\"\>", ",", "23", ",", "31", ",", "43", ",", "10", ",",
    "52", ",", "27", ",", "38", ",", "27", ",", "2", ",", "\<\"\"\>", 
   ",", "\<\"\"\>", ",", "1", ",", "\<\"\"\>", ",", "62", ",", "15", ",", 
   "0.83`", ",", "\<\"\"\>", ",", "23", ",", "18", ",", "39", ",", "21", 
   ",", "\<\"\"\>", ",", "32", ",", "\<\"\"\>", ",", "20", ",", "16", ",", 
   "30", ",", "34.5`", ",", "17", ",", "42", ",", "\<\"\"\>", ",", "35", ",", 
   "28", ",", "\<\"\"\>", ",", "4", ",", "74", ",", "9", ",", "16", ",", "44",
    ",", "18", ",", "45", ",", "51", ",", "24", ",", "\<\"\"\>", ",", "41", 
   ",", "21", ",", "48", ",", "\<\"\"\>", ",", "24", ",", "42", ",", "27", 
   ",", "31", ",", "\<\"\"\>", ",", "4", ",", "26", ",", "47", ",", "33", ",",
    "47", ",", "28", ",", "15", ",", "20", ",", "19", ",", "\<\"\"\>", ",", 
   "56", ",", "25", ",", "33", ",", "22", ",", "28", ",", "25", ",", "39", 
   ",", "27", ",", "19", ",", "\<\"\"\>", ",", "26", ",", "32"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.858761459328237*^9, 3.8587629824684844`*^9, 
  3.8587638544922943`*^9},
 CellLabel->
  "Out[163]=",ExpressionUUID->"a6dae40f-8cd4-47a5-8d72-ab34c63f4d0b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
   "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
   "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
   "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", 
   "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.858761459328237*^9, 3.8587629824684844`*^9, 
  3.858763854512842*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"c1f63d7e-496b-40e4-9cab-d4ef94d31376"]
}, Open  ]],

Cell["\<\
5) \:041a\:043e\:0433\:043e \:0431\:044b\:043b\:043e \:0431\:043e\:043b\:044c\
\:0448\:0435 \:0438\:0437\:043d\:0430\:0447\:0430\:043b\:044c\:043d\:043e \
\:0441\:0440\:0435\:0434\:0438 \:043f\:0430\:0441\:0441\:0430\:0436\:0438\
\:0440\:043e\:0432: \:0436\:0435\:043d\:0449\:0438\:043d \:0438\:043b\:0438 \
\:043c\:0443\:0436\:0447\:0438\:043d? 
\:041a\:0430\:043a\:043e\:0435 \:0441\:043e\:043e\:0442\:043d\:043e\:0448\
\:0435\:043d\:0438\:0435 \:043c\:0435\:0436\:0434\:0443 \:0436\:0435\:043d\
\:0449\:0438\:043d\:0430\:043c\:0438 \:0438 \:043c\:0443\:0436\:0447\:0438\
\:043d\:0430\:043c\:0438 \:0441\:0440\:0435\:0434\:0438 \:0432\:044b\:0436\
\:0438\:0432\:0448\:0438\:0445? 
\:041a\:0430\:043a\:043e\:0432\:0430 \:0434\:043e\:043b\:044f \:0432\:044b\
\:0436\:0438\:0432\:0448\:0438\:0445 \:0441\:0440\:0435\:0434\:0438 \:0436\
\:0435\:043d\:0449\:0438\:043d \:0438 \:0441\:0440\:0435\:0434\:0438 \:043c\
\:0443\:0436\:0447\:0438\:043d?\
\>", "Text",
 CellChangeTimes->{{3.6971486265306215`*^9, 3.697148670916634*^9}, {
   3.697149166207246*^9, 3.69714917607022*^9}, {3.6971499603259716`*^9, 
   3.697149971631243*^9}, {3.6971500214634056`*^9, 3.697150034918189*^9}, {
   3.6971502759963007`*^9, 3.6971502993573427`*^9}, {3.697150598310644*^9, 
   3.697150600585622*^9}, {3.6971513051715016`*^9, 3.6971513056991425`*^9}, {
   3.6971513598581853`*^9, 3.697151427716191*^9}, 3.6971577700827503`*^9, {
   3.7313760266731453`*^9, 3.731376030593162*^9}, {3.857509991610086*^9, 
   3.857509995721335*^9}, {3.857512128442943*^9, 3.8575121362899723`*^9}, {
   3.857512267641292*^9, 
   3.857512268049446*^9}},ExpressionUUID->"e4bcfe89-d866-4dc2-a2d3-\
ccaab87d75a2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"countWomen", " ", "=", " ", 
  RowBox[{"Count", "[", 
   RowBox[{"sex", ",", "\"\<female\>\""}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"countMen", " ", "=", " ", 
  RowBox[{"Count", "[", 
   RowBox[{"sex", ",", " ", "\"\<male\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"countMen", " ", ">", " ", "countWomen"}]}], "Input",
 CellChangeTimes->{{3.858761732702633*^9, 3.8587618050029535`*^9}, {
  3.858762095886757*^9, 3.8587620960667973`*^9}, {3.858762178812626*^9, 
  3.858762178870639*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"2ac1ff7d-0f45-426e-ba3f-113e1351be92"],

Cell[BoxData["314"], "Output",
 CellChangeTimes->{
  3.858761805438051*^9, {3.858762081282526*^9, 3.8587620975972843`*^9}, 
   3.8587621825168276`*^9, 3.8587638546268673`*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"4e66e7a1-988d-4cc9-8763-7264542d3f1a"],

Cell[BoxData["577"], "Output",
 CellChangeTimes->{
  3.858761805438051*^9, {3.858762081282526*^9, 3.8587620975972843`*^9}, 
   3.8587621825168276`*^9, 3.858763854632869*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"7d8c8229-91c3-492c-8085-e6ca590999ca"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.858761805438051*^9, {3.858762081282526*^9, 3.8587620975972843`*^9}, 
   3.8587621825168276`*^9, 3.85876385463687*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"beb2bdd6-e6eb-42e8-8cd2-fa51cc9697d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"countSurvived", " ", "=", " ", 
     RowBox[{"Pick", "[", 
      RowBox[{"sex", ",", "survived", ",", 
       RowBox[{"x_", "/;", 
        RowBox[{"x", "==", "1"}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"countSurvMen", " ", "=", " ", 
    RowBox[{"Count", "[", 
     RowBox[{"countSurvived", ",", " ", "\"\<male\>\""}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"countSurvWomen", " ", "=", " ", 
    RowBox[{"Count", "[", 
     RowBox[{"countSurvived", ",", " ", "\"\<female\>\""}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"countSurvMen", ">", "countSurvWomen"}]}]}]], "Input",
 CellChangeTimes->{{3.858761808139964*^9, 3.858761915069827*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"ec986577-44ee-4dd2-a5f2-0b7d23c050f4"],

Cell[BoxData["109"], "Output",
 CellChangeTimes->{{3.858761896156559*^9, 3.858761915548053*^9}, 
   3.8587620839259443`*^9, 3.858763854688881*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"92145d9b-8c29-4b95-9451-ef1a7523eff2"],

Cell[BoxData["233"], "Output",
 CellChangeTimes->{{3.858761896156559*^9, 3.858761915548053*^9}, 
   3.8587620839259443`*^9, 3.858763854693882*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"aed48659-199d-461c-a5f5-12086d51de64"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{{3.858761896156559*^9, 3.858761915548053*^9}, 
   3.8587620839259443`*^9, 3.8587638546988835`*^9},
 CellLabel->
  "Out[171]=",ExpressionUUID->"0f287475-e7c0-4bc3-81bf-dd3db9ead08b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"partSurvMen", " ", "=", " ", 
   RowBox[{"N", "[", 
    RowBox[{"countSurvMen", "/", "countMen"}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.8587619178707547`*^9, {3.8587619935864983`*^9, 3.8587621419480686`*^9}, {
   3.858762189631209*^9, 3.858762190745076*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"f0ffe80d-8911-42f0-b39d-19ffba8bc88e"],

Cell[BoxData["0.18890814558058924`"], "Output",
 CellChangeTimes->{{3.8587620224843507`*^9, 3.858762040506669*^9}, {
   3.8587620862496443`*^9, 3.858762138231845*^9}, 3.858762193268796*^9, 
   3.8587638547428937`*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"83b6c2a6-4372-4aad-8525-22e1772e97f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partSurvWomen", " ", "=", " ", 
  RowBox[{"N", "[", 
   RowBox[{"countSurvWomen", "/", "countWomen"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8587621476544843`*^9, 3.85876217622069*^9}},
 NumberMarks->False,
 CellLabel->
  "In[173]:=",ExpressionUUID->"fed559b4-a167-4f90-a5cf-9c1056aa2a50"],

Cell[BoxData["0.7420382165605095`"], "Output",
 CellChangeTimes->{
  3.8587621442682953`*^9, {3.8587621845549545`*^9, 3.858762194967317*^9}, 
   3.858763854792905*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"eda1c381-9567-46ec-87d6-74987642d281"]
}, Open  ]],

Cell["\<\
6) \:0417\:0430\:0432\:0438\:0441\:0438\:0442 \:043b\:0438 \:0447\:0438\:0441\
\:043b\:043e \:0432\:044b\:0436\:0438\:0432\:0448\:0438\:0445 \:043e\:0442 \
\:043a\:043b\:0430\:0441\:0441\:0430, \:0432 \:043a\:043e\:0442\:043e\:0440\
\:043e\:043c \:043f\:0443\:0442\:0435\:0448\:0435\:0441\:0442\:0432\:043e\
\:0432\:0430\:043b \:043f\:0430\:0441\:0441\:0430\:0436\:0438\:0440? \:041d\
\:0430\:0439\:0434\:0438\:0442\:0435 \:0441\:043e\:043e\:0442\:0432\:0435\
\:0442\:0441\:0442\:0432\:0443\:044e\:0449\:0438\:0435 \:0434\:043e\:043b\
\:0438 \:0432 \:043a\:0430\:0436\:0434\:043e\:043c \:043a\:043b\:0430\:0441\
\:0441\:0435\
\>", "Text",
 CellChangeTimes->{{3.6971486265306215`*^9, 3.697148670916634*^9}, {
   3.697149166207246*^9, 3.69714917607022*^9}, {3.6971494661429777`*^9, 
   3.697149483983929*^9}, {3.697149519566884*^9, 3.697149543439563*^9}, {
   3.6971495799584837`*^9, 3.6971495806543293`*^9}, {3.6971496883654747`*^9, 
   3.6971497358467307`*^9}, {3.697149822237713*^9, 3.6971498679896746`*^9}, {
   3.697149941588694*^9, 3.697149993446144*^9}, {3.6971500862779956`*^9, 
   3.69715017489952*^9}, {3.6971502574025817`*^9, 3.69715026775651*^9}, {
   3.6971503431229725`*^9, 3.697150353843094*^9}, {3.6971504259562674`*^9, 
   3.6971504312069063`*^9}, 3.697150605007526*^9, {3.697151309027834*^9, 
   3.697151309475397*^9}, 3.697154376684637*^9, {3.857509967057831*^9, 
   3.857509972769013*^9}, {3.857512058082717*^9, 3.857512059585751*^9}, 
   3.857512194314763*^9, {3.8575122691218977`*^9, 
   3.8575122700033703`*^9}},ExpressionUUID->"8508eb62-cb2e-4836-8ced-\
6e2a9aa8d40f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"countClass", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Count", "[", 
     RowBox[{"pclass", ",", "i"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8587622942228603`*^9, 3.858762313110758*^9}},
 CellLabel->
  "In[174]:=",ExpressionUUID->"25f9a26d-24bb-4f3e-b7f3-8176886c5f0e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"216", ",", "184", ",", "491"}], "}"}]], "Output",
 CellChangeTimes->{3.858762315067338*^9, 3.858763854838916*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"f506c91e-d5be-4f81-bd7c-110d7629f7eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SurvClass", " ", "=", " ", 
  RowBox[{"Pick", "[", 
   RowBox[{"pclass", ",", "survived", ",", 
    RowBox[{"x_", "/;", 
     RowBox[{"x", "==", "1"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"countSurvClass", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Count", "[", 
     RowBox[{"SurvClass", ",", "i"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.858762317219981*^9, 3.8587623892078657`*^9}},
 CellLabel->
  "In[177]:=",ExpressionUUID->"5c10711f-7dc4-4162-8c00-087281e566aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", ",", "1", ",", "2", 
   ",", "2", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "3", ",", 
   "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "1", 
   ",", "2", ",", "1", ",", "2", ",", "2", ",", "1", ",", "3", ",", "2", ",", 
   "3", ",", "3", ",", "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", 
   ",", "1", ",", "1", ",", "2", ",", "3", ",", "3", ",", "3", ",", "2", ",", 
   "3", ",", "3", ",", "3", ",", "2", ",", "1", ",", "3", ",", "3", ",", "3", 
   ",", "1", ",", "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", 
   "3", ",", "3", ",", "1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1", 
   ",", "3", ",", "3", ",", "3", ",", "3", ",", "1", ",", "2", ",", "1", ",", 
   "3", ",", "1", ",", "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", 
   ",", "3", ",", "2", ",", "1", ",", "3", ",", "1", ",", "1", ",", "1", ",", 
   "2", ",", "3", ",", "3", ",", "1", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "1", ",", "3", ",", "3", ",", "3", ",", "2", ",", "3", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "3", ",", "3", ",", "2", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "2", ",", "1", ",", 
   "1", ",", "2", ",", "2", ",", "1", ",", "2", ",", "3", ",", "1", ",", "3", 
   ",", "1", ",", "1", ",", "3", ",", "2", ",", "1", ",", "2", ",", "2", ",", 
   "3", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", ",", "3", 
   ",", "1", ",", "1", ",", "1", ",", "3", ",", "1", ",", "3", ",", "1", ",", 
   "2", ",", "2", ",", "1", ",", "3", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "2", ",", "1", ",", "3", ",", "2", ",", "2", ",", "2", ",", "2", ",", 
   "3", ",", "1", ",", "3", ",", "2", ",", "1", ",", "2", ",", "2", ",", "2", 
   ",", "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "1", ",", "1", ",", 
   "3", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", ",", "2", ",", "3", 
   ",", "3", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1", ",", "2", ",", 
   "1", ",", "3", ",", "3", ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", 
   ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1", ",", 
   "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "3", ",", "3", 
   ",", "1", ",", "1", ",", "3", ",", "3", ",", "2", ",", "1", ",", "1", ",", 
   "3", ",", "2", ",", "1", ",", "3", ",", "2", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "2", ",", "1", ",", "2", ",", "1", ",", "1", ",", "2", ",", 
   "1", ",", "3", ",", "2", ",", "2", ",", "1", ",", "3", ",", "1", ",", "1", 
   ",", "1", ",", "2", ",", "1", ",", "3", ",", "3", ",", "1", ",", "1", ",", 
   "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "1", ",", "2", ",", "2", 
   ",", "3", ",", "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "3", ",", 
   "3", ",", "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "3", ",", "1", 
   ",", "1", ",", "1", ",", "2", ",", "2", ",", "1", ",", "2", ",", "3", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "2", ",", "2", ",", "3", 
   ",", "2", ",", "2", ",", "1", ",", "3", ",", "1", ",", "1", ",", "2", ",", 
   "3", ",", "1", ",", "3", ",", "1", ",", "3", ",", "3", ",", "1", ",", "3", 
   ",", "2", ",", "1", ",", "3", ",", "3", ",", "1", ",", "1", ",", "3", ",", 
   "3", ",", "2", ",", "3", ",", "1", ",", "3", ",", "2", ",", "1", ",", "3", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "3", ",", "1", ",", "1", ",", 
   "3", ",", "1", ",", "2", ",", "2", ",", "3", ",", "1", ",", "2", ",", "3", 
   ",", "1", ",", "2", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.858762362586068*^9, 3.85876238974506*^9}, {
  3.8587638548909273`*^9, 3.85876385494694*^9}},
 CellLabel->
  "Out[177]=",ExpressionUUID->"f420c6ee-e661-40ff-b99d-2e791378d5fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"136", ",", "87", ",", "119"}], "}"}]], "Output",
 CellChangeTimes->{{3.858762362586068*^9, 3.85876238974506*^9}, {
  3.8587638548909273`*^9, 3.858763854952941*^9}},
 CellLabel->
  "Out[178]=",ExpressionUUID->"b9013b8f-bb64-4bec-a28d-4f3b42460471"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"partSurvClass", " ", "=", " ", 
   RowBox[{"N", "[", 
    RowBox[{"countSurvClass", "/", "countClass"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.85876239174467*^9, 3.858762422661208*^9}},
 CellLabel->
  "In[179]:=",ExpressionUUID->"11df7804-6dad-4e5a-872c-ebfefb547f5e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.6296296296296297`", ",", "0.47282608695652173`", ",", 
   "0.24236252545824846`"}], "}"}]], "Output",
 CellChangeTimes->{3.858762423280348*^9, 3.858762487407221*^9, 
  3.858763854996951*^9},
 CellLabel->
  "Out[179]=",ExpressionUUID->"e14b2bf6-20f7-429e-9f77-a84ccf1a2441"]
}, Open  ]],

Cell[TextData[{
 "7) \:0412 Mathematica \
\:0440\:0435\:0430\:043b\:0438\:0437\:043e\:0432\:0430\:043d\:044b \:043d\
\:0435\:043a\:043e\:0442\:043e\:0440\:044b\:0435 \:044d\:043b\:0435\:043c\
\:0435\:043d\:0442\:044b \:043c\:0430\:0448\:0438\:043d\:043d\:043e\:0433\
\:043e \:043e\:0431\:0443\:0447\:0435\:043d\:0438\:044f. \:0412 \:0447\:0430\
\:0441\:0442\:043d\:043e\:0441\:0442\:0438, \:043c\:043e\:0436\:043d\:043e \
\:043e\:0431\:0443\:0447\:0438\:0442\:044c \:043a\:043b\:0430\:0441\:0441\
\:0438\:0444\:0438\:043a\:0430\:0442\:043e\:0440, \:043a\:043e\:0442\:043e\
\:0440\:044b\:0439 \:043f\:043e \:0434\:0430\:043d\:043d\:044b\:043c \:043a\
\:043b\:0430\:0441\:0441\:0430, \:043f\:043e\:043b\:0430 \:0438 \:0432\:043e\
\:0437\:0440\:0430\:0441\:0442\:0430 \:043f\:0430\:0441\:0441\:0430\:0436\
\:0438\:0440\:0430 ( \[OpenCurlyDoubleQuote]Pclass\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Sex\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]Age\[CloseCurlyDoubleQuote] ), \
\:043f\:043e\:0441\:0442\:0430\:0440\:0430\:0435\:0442\:0441\:044f \:043f\
\:0440\:0435\:0434\:0441\:043a\:0430\:0437\:0430\:0442\:044c \:0432\:044b\
\:0436\:0438\:043b \:0447\:0435\:043b\:043e\:0432\:0435\:043a \:0438\:043b\
\:0438 \:043d\:0435\:0442 (\[OpenCurlyDoubleQuote]Survived\
\[CloseCurlyDoubleQuote]).\n  \:0430) \:0440\:0430\:0437\:0434\:0435\:043b\
\:0438\:0442\:0435 \:0434\:0430\:043d\:043d\:044b\:0435 \:0432\:0441\:0435\
\:0445 \:0441\:0442\:043e\:043b\:0431\:0446\:043e\:0432 \:043d\:0430 \:043e\
\:0431\:0443\:0447\:0430\:044e\:0449\:0443\:044e \:0438 \:043f\:0440\:043e\
\:0432\:0435\:0440\:043e\:0447\:043d\:0443\:044e \:0432\:044b\:0431\:043e\
\:0440\:043a\:0443 (\:043f\:0435\:0440\:0432\:044b\:0435 70% (\:043e\:0442 \
\:043e\:0431\:0449\:0435\:0433\:043e \:0447\:0438\:0441\:043b\:0430 \:043f\
\:0430\:0441\:0441\:0430\:0436\:0438\:0440\:043e\:0432) \[LongDash] \:043e\
\:0431\:0443\:0447\:0435\:043d\:0438\:0435, \:043e\:0441\:0442\:0430\:0432\
\:0448\:0438\:0435\:0441\:044f \[LongDash] \:0442\:0435\:0441\:0442)\n  \
\:0431) \:043e\:0431\:0443\:0447\:0438\:0442\:0435 \:043a\:043b\:0430\:0441\
\:0441\:0438\:0444\:0438\:043a\:0430\:0442\:043e\:0440 \:043d\:0430 ",
 StyleBox["\:043e\:0431\:0443\:0447\:0430\:044e\:0449\:0435\:0439",
  FontWeight->"Bold"],
 " \:0432\:044b\:0431\:043e\:0440\:043a\:0435 (\:0438\:0441\:043f\:043e\:043b\
\:044c\:0437\:0443\:044f \:0444\:0443\:043d\:043a\:0446\:0438\:044e ",
 StyleBox["Classify ",
  FontWeight->"Bold"],
 "\:0441\:043e \:0441\:0442\:0430\:043d\:0434\:0430\:0440\:0442\:043d\:044b\
\:043c\:0438 \:043e\:043f\:0446\:0438\:044f\:043c\:0438, \:043a\:043e\:0433\
\:0434\:0430 \:0431\:0443\:0434\:0435\:0442 \:043e\:0431\:0443\:0447\:0435\
\:043d \:043a\:043b\:0430\:0441\:0441\:0438\:0444\:0438\:043a\:0430\:0442\
\:043e\:0440 \:043d\:0430 \:043e\:0441\:043d\:043e\:0432\:0435 \:043b\:043e\
\:0433\:0438\:0441\:0442\:0438\:0447\:0435\:0441\:043a\:043e\:0439 \:0440\
\:0435\:0433\:0440\:0435\:0441\:0441\:0438\:0438) ",
 StyleBox["\:0414\:043b\:044f \
\:0444\:043e\:0440\:043c\:0438\:0440\:043e\:0432\:0430\:043d\:0438\:044f \
\:0432\:0445\:043e\:0434\:043d\:044b\:0445 \:0434\:0430\:043d\:043d\:044b\
\:0445 \:043e\:043a\:0430\:0436\:0435\:0442\:0441\:044f \:043f\:043e\:043b\
\:0435\:0437\:043d\:043e\:0439 \:0444\:0443\:043d\:043a\:0446\:0438\:044f, \
\:043a\:043e\:0442\:043e\:0440\:0443\:044e \:0432\:044b \:043f\:0438\:0441\
\:0430\:043b\:0438 \:0432\:044b\:0448\:0435.",
  FontSlant->"Italic"],
 "\n  \:0432) \:0441 \:043f\:043e\:043c\:043e\:0449\:044c\:044e \:043a\:043b\
\:0430\:0441\:0441\:0438\:0444\:0438\:043a\:0430\:0442\:043e\:0440\:0430 \
\:0441\:0434\:0435\:043b\:0430\:0439\:0442\:0435 \:043f\:0440\:0435\:0434\
\:0441\:043a\:0430\:0437\:0430\:043d\:0438\:0435 \:043d\:0430 ",
 StyleBox["\:0442\:0435\:0441\:0442\:043e\:0432\:043e\:0439",
  FontWeight->"Bold"],
 " \:0432\:044b\:0431\:043e\:0440\:043a\:0435. \:041e\:0446\:0435\:043d\:0438\
\:0442\:0435 \:043a\:0430\:0447\:0435\:0441\:0442\:0432\:043e \:043a\:043b\
\:0430\:0441\:0441\:0438\:0444\:0438\:043a\:0430\:0442\:043e\:0440\:0430, \
\:0442.\:0435. \:043e\:043f\:0440\:0435\:0434\:0435\:043b\:0438\:0442\:0435 \
\:043f\:0440\:043e\:0446\:0435\:043d\:0442 \:0441\:043e\:0432\:043f\:0430\
\:0434\:0435\:043d\:0438\:0439 \:043c\:0435\:0436\:0434\:0443 \:043f\:0440\
\:0435\:0434\:0441\:043a\:0430\:0437\:0430\:043d\:0438\:043c\:0438 \:0438 \
\:0438\:0437\:0432\:0435\:0441\:0442\:043d\:044b\:043c\:0438 \:0434\:0430\
\:043d\:043d\:044b\:043c\:0438, \:043a\:043e\:0442\:043e\:0440\:044b\:0435 \
\:0431\:044b\:043b\:0438 \:0432 \:0441\:0442\:043e\:043b\:0431\:0446\:0435 \
\[OpenCurlyDoubleQuote]Survived\[CloseCurlyDoubleQuote] \:0434\:043b\:044f \
\:0442\:0435\:0441\:0442\:043e\:0432\:043e\:0439 \:0432\:044b\:0431\:043e\
\:0440\:043a\:0438"
}], "Text",
 CellChangeTimes->{{3.857510725331534*^9, 3.857510732698735*^9}, {
  3.857511913330621*^9, 3.857512036113645*^9}, {3.857512067401813*^9, 
  3.857512103234037*^9}, {3.857512211489235*^9, 3.8575122713856773`*^9}, {
  3.857512351801939*^9, 3.8575126011769943`*^9}, {3.857512635248839*^9, 
  3.857512867032846*^9}, {3.8575129497220507`*^9, 3.857513118041481*^9}, {
  3.857513759209144*^9, 3.857513760584618*^9}, {3.857516461053749*^9, 
  3.857516625532998*^9}},ExpressionUUID->"a8f61524-6de9-4eec-87dc-\
9d756eb32e5b"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"features", "=", 
     RowBox[{"Thread", "[", 
      RowBox[{"{", 
       RowBox[{"pclass", ",", "age", ",", "sex"}], "}"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dataset", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{"g", "[", 
       RowBox[{"features", ",", "survived"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainSize", "=", 
     RowBox[{"IntegerPart", "[", 
      RowBox[{"0.7", "*", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Length", "[", "data", "]"}], "-", "1"}], ")"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainSet", " ", "=", 
     RowBox[{"dataset", "[", 
      RowBox[{"[", 
       RowBox[{";;", "trainSize"}], "]"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"testSet", "=", 
     RowBox[{"dataset", "[", 
      RowBox[{"[", 
       RowBox[{"trainSize", ";;"}], "]"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.858762513791855*^9, 3.8587625618906193`*^9}, {
  3.8587626028077617`*^9, 3.858762621300668*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"8b97131a-7be6-434f-95fd-a770efcb5e56"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"classif", "=", 
   RowBox[{"Classify", "[", "trainSet", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8587626255425444`*^9, 3.8587626298295193`*^9}, {
  3.8587630719044285`*^9, 3.858763074985872*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"ed2dd09b-8baa-4a95-b50c-7a6782b54d71"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\""}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\""}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "0", "1"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["623", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 623, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Nominal"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Nominal", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 623, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13., 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
                    0.75 -> 1, 0.83 -> 2, 0.92 -> 3, 1 -> 4, 2 -> 5, 3 -> 6, 
                    4 -> 7, 5 -> 8, 7 -> 9, 8 -> 10, 9 -> 11, 10 -> 12, 11 -> 
                    13, 12 -> 14, 13 -> 15, 14 -> 16, 14.5 -> 17, 15 -> 18, 
                    16 -> 19, 17 -> 20, 18 -> 21, 19 -> 22, 20 -> 23, 20.5 -> 
                    24, 21 -> 25, 22 -> 26, 23 -> 27, 23.5 -> 28, 24 -> 29, 
                    25 -> 30, 26 -> 31, 27 -> 32, 28 -> 33, 28.5 -> 34, 29 -> 
                    35, 30 -> 36, 31 -> 37, 32 -> 38, 32.5 -> 39, 33 -> 40, 
                    34 -> 41, 35 -> 42, 36 -> 43, 36.5 -> 44, 37 -> 45, 38 -> 
                    46, 39 -> 47, 40 -> 48, 40.5 -> 49, 41 -> 50, 42 -> 51, 
                    43 -> 52, 44 -> 53, 45 -> 54, 45.5 -> 55, 46 -> 56, 47 -> 
                    57, 48 -> 58, 49 -> 59, 50 -> 60, 51 -> 61, 52 -> 62, 53 -> 
                    63, 54 -> 64, 55 -> 65, 55.5 -> 66, 56 -> 67, 58 -> 68, 
                    59 -> 69, 60 -> 70, 61 -> 71, 62 -> 72, 63 -> 73, 64 -> 
                    74, 65 -> 75, 66 -> 76, 70.5 -> 77, 71 -> 78, "" -> 
                    79|>, <|"female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13., 0}, "ID" -> 
                    805960690728832372, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {3, 79, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, CompressedData["
1:eJw1UksoRVEUvVJCBorEQBEZKFIUyWsZqCelkCKlEBFFSiElRCklklIkCb0S
RUi9sniRT4Tn/38ZKKUoUsrAPedsd3Jup33WXr/YqqaiGj/Lsgqs/8/Hys6S
gfGUJ3p+FyPSKx8Z3xEw7R1+YN9PeVKj554vravrQZ93dH6H5MzG3dHVUn2c
XXzL4E932X3vDRuaw+yRax6+19t/V0xuVEhXHHyL6s9zXvJDXbdesPB1b7Lb
dc7l2pjE6JszhmvgM2q4TC8vnxNsiFOma0InTOH8Tv7YMb/Ump8jrtks3GWH
bFN03AfM1ED71LQ7d7mpxp922KMJbtMmayvxUKlx+G9xyOFvU9hgpF7g5oRe
sE7FJjV0lTNq3LvEUg28wIokJWSOdXpgij5Fr3mEm6mho4Nv7bTS9Am5R4WZ
g7xDgcGBy+BC9mDM7IXwgPBCoOEJ4Y0uowOiC6ITWUY3xAesGF8gPkF8Q4bx
EeIrxGeI75AcUGRygeQEyQ2SIyRX1JucIblDeoBc0wtIT9BregPpEaRXqDI9
g/QOf6ISTO0=
                    "], {-0.5, 0., 0.5}}, "Version" -> {13., 0}, 
                    "ID" -> 6831348230023982856, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.7941635766521407, \
-0.06279821363423388, -0.6044506579394452}, {
                   0.34866706459416624`, -0.8617344796895391, \
-0.36857151895051066`}, {-0.49773034023089924`, -0.503458112337609, 
                   0.7062538053243216}}, 
                  "Precisions" -> {10.547923927068167`, 11.469452528022298`, 
                   14.760418440950634`}, "NoisePrecision" -> None, 
                  "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {0.10040981612117603`, 0.05995936600227766, 
                    0.06904000744780207}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13., 0}, "ID" -> 5421644807349238107|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {0.10040981612117601`, 0.05995936600227762, 
                    0.06904000744780209}, 
                    "StandardDeviation" -> {0.29135874838967485`, 
                    0.2923583443039394, 0.2817426855660419}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    3185515477251867342|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                   "Mean" -> {0.10040981612117601`, 0.05995936600227762, 
                    0.06904000744780209}, 
                   "StandardDeviation" -> {0.29135874838967485`, 
                    0.2923583443039394, 0.2817426855660419}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   3185515477251867342|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {3}, "ID" -> 
                    7453478256874281711|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {51}, 
                    "ID" -> 9138240744379437000|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 4823998046899962003|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0654686, "MaxTrainingMemory" -> 371944, 
                  "DataMemory" -> 62384, "FunctionMemory" -> 61944, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 12, 21, 50, 55.1349817`9.494002073908344}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.3846339974107953`, -2.3846339974107953`, \
-2.260210271251404, -2.2323009059086294`, -2.1417991275395836`, \
-2.097404235031564, -2.0460772121666544`, -2.006275270805729, \
-1.9544998016902009`, -1.931607821684366, -1.8804894345726173`}, 
                   "LeftBoundary" -> -2.260210271251404, "LeftScale" -> 
                   0.06221186307969572, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[6.280589423418462, 0.15327288020387622`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 967176822927612644|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>, 
             "Version" -> {13., 0}, "ID" -> 5520242497341430105|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>, 
             "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
               0.75 -> 1, 0.83 -> 2, 0.92 -> 3, 1 -> 4, 2 -> 5, 3 -> 6, 4 -> 
                7, 5 -> 8, 7 -> 9, 8 -> 10, 9 -> 11, 10 -> 12, 11 -> 13, 12 -> 
                14, 13 -> 15, 14 -> 16, 14.5 -> 17, 15 -> 18, 16 -> 19, 17 -> 
                20, 18 -> 21, 19 -> 22, 20 -> 23, 20.5 -> 24, 21 -> 25, 22 -> 
                26, 23 -> 27, 23.5 -> 28, 24 -> 29, 25 -> 30, 26 -> 31, 27 -> 
                32, 28 -> 33, 28.5 -> 34, 29 -> 35, 30 -> 36, 31 -> 37, 32 -> 
                38, 32.5 -> 39, 33 -> 40, 34 -> 41, 35 -> 42, 36 -> 43, 36.5 -> 
                44, 37 -> 45, 38 -> 46, 39 -> 47, 40 -> 48, 40.5 -> 49, 41 -> 
                50, 42 -> 51, 43 -> 52, 44 -> 53, 45 -> 54, 45.5 -> 55, 46 -> 
                56, 47 -> 57, 48 -> 58, 49 -> 59, 50 -> 60, 51 -> 61, 52 -> 
                62, 53 -> 63, 54 -> 64, 55 -> 65, 55.5 -> 66, 56 -> 67, 58 -> 
                68, 59 -> 69, 60 -> 70, 61 -> 71, 62 -> 72, 63 -> 73, 64 -> 
                74, 65 -> 75, 66 -> 76, 70.5 -> 77, 71 -> 78, "" -> 79|>, <|
               "female" -> 1, "male" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {13., 0}, "ID" -> 1089012348783539370, 
             "Output" -> <|
              "(f1f2f3)" -> <|
                "Type" -> "NominalVector", "Weight" -> 3|>|>|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 4840604436159386362|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|0 -> 1, 1 -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {13., 0}, "ID" -> 8361458276478038540, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 3972604269906377310|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", "Marginal" -> <|0 -> 0.6048, 1 -> 0.3952|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1:eJwkXHc8198XRnbJ3jIjpSFJEl2aQiSrFJFRMippymyXr1EUIXtERjbhWmVk
752VmS2bfvf4/ZO/ep3XOfe5z3mec8/7I3L15nkLKgoKipvkHybyl1GEg5Ep
sxS9ctN6ndY9itwijENnm+pR0kuzJ+27BrHitmuqBXee4ZDPP79QTn9BNlGh
k6ftm3DEjUtxn8e68fnayK2Pqdvwt5Ihpn/yuahpy6cnSfcKsEKsnPTP/Eb8
41kTbX95G+7VWYm37+nBjX3SnP8KinGpZKss1eEmrL2/LUjjdjEeU30k/dq6
AuUkHRzRPdePzykLZE9FFCP+rQl7bZhrcYlZll600wfE88bX9tqPZOTWnv42
JTUVzUorfm9ZL8Hhvp6UW3YkIQYT8fNbSD4ytnP5GSSfRxQ2XMskn9szl027
KXuxVOl5g7OyzeiUd8TNMKpCfDVpze6LbR/qM190X2WpRAFzi7L8PPXIoTx5
X4h9GW4Y4aIp+pyJRq87zlSQfNL/u17+i+RD/az55h2Sz97Vhz2LJB/BN4en
1uWb8KiN6xO2G41oE+XlOluBfiRIVf318Jl6dKH+w51Kmhok+qOUU5IrGaeO
JvlOn2jAap8tXS7LN6CrEdGyj9XKkS/Na5ZKEqe2OcGsj8RJOX78l/gQxtMX
YxxF+MPRo5migAv+PejO80rO8cwKvHp186UBg3r0bJ1vlILRA6lzKRXt+1aE
t/Hv13HWnkLZ4XSx17nt0SuvtGMnrH/gaLrN82+CarFr8HHVPlK3pHL0byup
W2rvEzo4nzLJSlnKwmJ8ePl50yZyPvGnLZj/a85FKralr2t2NOGXYsFoRq4V
75K8si6q3Ylv3G8byrtRgRZvbvN7KVuPnzp8prwlN4D6Aw8JZX8fwAfN45sB
B3rMDF+hbku7NNc4yPloZddxAd6Ypq3G4HzcatvWOsj5/HFl2KFBzmd1Mdj4
EzmfCbWqtnhyPtbXSlzXyPkc1xnPgPOZn1b2iSbnc0GrhvsHOR+pPMrkWhIn
QGdAAPBmIiWfv5XUjbNV+g0Vqds5ied3DEjdCr4mPkxXK0P7zjueXepKx6zs
UstHs5qwbXZNprZrGz64c78jJWUTatb4rt0gmIo8w2q1mzSS8b+I0Udr1NmI
3UKpo4nUTe61nDI3qduxHp9QZhLHnvXPS3kS59U7ZQ09EifJVV2PgrsesSTX
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
8KzpmYBVqYRn/dVrkMB8icnsSV3wrFWTZdN4/1SkjPPrZ8KztHNU+MGz4ux1
uZcRnnXgxGc5nKeyP+wH9OBu1LtjqMsM2igw5lg6qufyYKdBW0dCD/u1UT9r
EwuillRQng3H+j505lN7er5Pyqh+oWUW7FdeOx9AbefUi/i88y2lIRVz5eF4
KX0zQsNwy6tyWkX/TiL86BLlH4x34TTmcsW4iF6Pp17i5IUfvSIbh3zVyILr
Gw+1/aS0V6yJmFAvpHqeWVtGfqihCkMHgtA32GK3zSm6+wmlpcxKreNvoep7
yt6hb3Dg3f2QiJlcmnt3eC7jHc8lfYz9SIEj5xl7ZHLGE5/hPCreXn/gR/Wa
OHzXSr+h+yeTntaENFPmCaUJ2HMq+6tKF/MyXq+uZWJexufHpogybaIiv/iO
Xdcqos4/WPQRe07rO36qoL5gtkw1ZxU5z7aowx/hD4Q3rFcGTtQ+v5wVOOTk
8iT590TfZqs9/+sn+uYsFayHforRWfGf0LfyK4+SmIi+SZR+ai8i+pa/bnrN
INE3857X5YNE31hTtLsZe6Uy1tyEPxj4E80HHCLZ37YE+hZSRJvjPML3Rc9A
r09c5ZZc0JlKs6qo20KO63/nXCEn1eP3Jej1Oa5DkXVEjsWV5+HDRE55rcm5
X0ROdlh6LvZbalzkEUC/y+RblxDsxbn/XevXDnI/jZlceohzwQPCL7PUztHi
v95vHnpdQu8INjgy01VPTxwdczULj6UK9j5b+ivEi/qy6/XAp+pYKmbHn3HB
0GG64sF/E5ZMNeTex16CLwwu9EzYQOSc/Vl5Gv7APYE/HjhedGrfZ/gDjriP
jHfHnA7VdCCP1Gas9l8kwYlOxmzq2IfyO5v1pQXBiZdcG34ij/TL4bNuBsGJ
Grkjtgyc6JdKQw+GxoMZ744to9N+YR8K+xavBswhJ7iovURds1b9PuVaEE71
FXlexZyEx/ThHuSRdtnIr2h720gd4r92lGv5a1r563p3zElIsUn+V/OwjQ6/
0b1n2rWU8vAPesDYw+T3rgf+QHu3gQnkMFVeoNB/YH5kpRX+W2PG0AvML9gc
6DMVJLxEbvfy6TWElySGJJ49SniJpePu39yEl3g0Maua1AVRId0dCc8JLzHp
ag/B/MKf2aFA+INTquFc2Heru7lgEnrt6RDB2Gf3jfUNIy/Wts2KBXulMl2V
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
            "] -> Automatic, 
           Method -> "KDtree"]]]], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.6048, 0.3952}, "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UDAfqJaRiXEUDQY0MiAAfcgQMA==
       "], "DistributionSmoothing" -> 0.5, 
      "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3)" -> <|
            "Type" -> "NominalVector", "Weight" -> 3, 
             "SetSize" -> {3, 79, 2}|>|>, 
         "Output" -> <|
          "(f1f2f3)" -> <|"Weight" -> 3, "Type" -> "NumericalVector"|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3)" -> <|
                "Type" -> "NominalVector", "Weight" -> 3, 
                 "SetSize" -> {3, 79, 2}|>|>, 
             "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 
                15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 20, 21 -> 
                21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 26, 27 -> 
                27, 28 -> 28, 29 -> 29, 30 -> 30, 31 -> 31, 32 -> 32, 33 -> 
                33, 34 -> 34, 35 -> 35, 36 -> 36, 37 -> 37, 38 -> 38, 39 -> 
                39, 40 -> 40, 41 -> 41, 42 -> 42, 43 -> 43, 44 -> 44, 45 -> 
                45, 46 -> 46, 47 -> 47, 48 -> 48, 49 -> 49, 50 -> 50, 51 -> 
                51, 52 -> 52, 53 -> 53, 54 -> 54, 55 -> 55, 56 -> 56, 57 -> 
                57, 58 -> 58, 59 -> 59, 60 -> 60, 61 -> 61, 62 -> 62, 63 -> 
                63, 64 -> 64, 65 -> 65, 66 -> 66, 67 -> 67, 68 -> 68, 69 -> 
                69, 70 -> 70, 71 -> 71, 72 -> 72, 73 -> 73, 74 -> 74, 75 -> 
                75, 76 -> 76, 77 -> 77, 78 -> 78, 79 -> 79|>, <|
               1 -> 1, 2 -> 2|>}, 
             "Output" -> <|
              "(f1f2f3)" -> <|"Weight" -> 3, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.5273984670639038, -0.15432728826999664`, \
-0.3316039443016052}, {-0.12462006509304047`, 0.03536298871040344, 
                0.5185959935188293}, {0.18527460098266602`, 
                0.8396864533424377, 0.29430946707725525`}}], CompressedData["
1:eJxtVHk41ekftVzcbHcSJSkkaZGKFuX7fl6ytK+WRqFQUkPSDGmZXG4oKUvR
kLVsachSEff9fEsLbSZjK0XCWFJJiyammuZ5fn/+zvOc85zznD/Of8fA03+D
t5yMjMzPwu+ywWOf9d69HvsdFP8L2z18zc18/yvXfed//f8glvn/XubVnMX0
UpoFLQpbSlu7M1mw1QPwLFfDLVrnmWBuJCis4eFbmC2tNdBnf0gKUOmZAvg4
OKDaax1q4MlA8w8L1MAY+DJpUOplKcSi7m/c7JXKfNqx4/DjnHTyk819/FS+
BZo6rdnEwFXcPx+rsaheDw8OXoD1eghWrZb8s59eY2ZkEzy+fJIJA2dSlYFD
VPNlM3MZ18e6B9OkspXncNaeIJJVlECzjRLgrOo7tu2wG1TIKuLB4OXMv1YK
zR0nIciqDlYnzuS32+8FNc4MFvW34TQnR1RwvQZ1PYdR/W8/tBj7lLsY5YAj
4Tl49nAha1QMq7RYaodvldJxnpwTab+vyZUediadj1150zFiELJa9DVXpTO0
d0J+Rxo2XCzB2a4G1PfaFBy40wMaDS1wpXo0tDj/zTLdYyB6hgKUOfeiekwu
SCvvwQNqDZsen+Fyp/Qzwye/QN0WETWQaQc/LxuIVpWn9+J0qOmnXgzMv4Mr
h1rh5cpLeKLHC3UP1EJ8wAA3JFOPyUXhfL7HQW7h1XL4CKchq2sfibTRgOEl
fxKhrBoRtXWQ6TnnYctXAQuf9gEG7UekLxe7o3hLFMjx8vyDx0e5SqteSN27
ERL2OPMvYgu5lENZbH7GdVLq+Qyc3LbC+4+TQDL4GW++28d9bnMhdw+txfnT
3fCCgz/RlzkDESQBjkdNle58Xo/is3stE9dcBEfJJSxcvxRCTIbQTxgDVhMa
sFnxFLobupFVb1SZrkYKM98gz79+cpVsnPWALUyS5fc5hwFZ4Qei7AI24SBB
C7k4kCQqss2mG9Hn1HLWE1UArlV2uCzIAf8pikXWWYIjD+eBoCYSIpZsgJga
Ir2/5xDxTnsK+popfHHEaWLhYkDH/9wJyg9LmVm8Mm/gE0ybkx7Ctpxv3HCz
NdksrWPWglBmHAygHH4NhncUkwy7ADzWIQ+xSsrwS0UEnuyV5c9mTqESrc+W
Mz00oMekjJi/jETdRgnUjfyOxi2L6NTXd6Gk4ABut6mGqoUFUslbtjj50w3O
oyQCbHtE3H29FCKxfiq9pCRgueX6VGbuRP7LwGbQjtOlttnzuDXZhzHQJAIm
JgXgOYfB8lt8Asw9XoJTskPINsurKBiRp3rlW7ExQpcaiSkNzEgij5zn8g1J
M6W7ju4gG+MvorfbJ2w2rEG7mhfE74o8WshHkZO2jtAtFqJOjiHeKKxG0dSx
1HF3JKbZBAH2VXCjXpRLZ55TRE+fAZbonc4NWmiThMsiXlYxk32drEgq24sh
VtaRNrgXwFSxFRvdrU2j057hSX4lhCvchGX3s2AkNBq8U56ixGYGX1r7BCV1
BQvf8NoQzjuhIR8P0zZs5S4/0cJPx8Ooxc1YyzmbzNGv6wi+fz/MWgU+kNZm
Q6/q2pNkxQsgnVIEq7ZJye3a52xcXyy+G3oNH8lctGtbADUWZaD2ugzfLI1A
YbgF16x3kePGXJAqD96Vbq2dxHttmELXNi8CHUVF8DsSSiyzdWHfP05wZmk0
Jz+ggw3L5/FT5uzmmy+k4+82t8FmfSH4tibCoZvZeFrnK2Q7BKPCHRWemsSx
GSdjWamLJ1Z7/Iy7ZleB7CodzPTR4CNu6dM2GwEfmxYGUS05NEU0A1Qbw+G3
49lwT6Waa31cA4d1KslQgwjXzzqPGR+KweTEdTam4ihOPmiE910SWL8Rh7ZF
udhdrYypag/wrlk7qqoIqF2fPLG024/U4BprkrOCBZ11zPzVTla/5C36yF8n
V6tdMOGQI/9nhjzmTZ5FTwUNQ7mvGNz4XKz3jMZ+pzxipf0ezOIMwK7GFJUf
JePoW2Z8YrsalTkXCfvj3oN0OoHpQXIkalMXnnBaApEDhezDjQJMl3uARsI8
MBn6jWjuCGPxxjUkYkjIJBEZIMhZjOJiORp8owtXvE+GK1pHMbVPzJ5nvsBX
VR9Yc4Mh9Wd/cGHXS3C+zToo6/DAqHQrvu+SPt++RAI97m2Ya7sfZz0phSs/
qljOvHkb08NSmDExhkSZNPw6WQl7tQOge546/XYkGk67GNF21ygWbdRE+oSm
9ITiR2K/SZffIbcN/vTbQT/9cImd9riMx5dEY+DgVAg4r8PEKhfwaog6/3VZ
ItzeLoDkF+N5r40WrHpcoVSFD2ScWyZ6ZxQjP7sbKhuPEBeVxSSt4SwR6LhC
uEidLsisJq2LjrD8zNlgJJfEMp8K+fEm0djuEA8Xf1yNqibbITxwFMqmrqUd
QenwTr4NNlbmQBMkI901C/y759NE+2lo9raUuUU8YrIhqtiZuJTFLAsG1S59
kNt9h9StriAC40LUC3dEez0B31mficOqPeAccBGrLFOJZb0ftP20D3RtpfjO
vgR3XBvNjQpOJaNrHkpXjAlka2VqwGjsJgw5PIznW2LAXqhE116LAq0OA7ya
hbB4sA3XLHBiX0IbceyBTHbuVnxFkFI66EadREP5GCaTV4DrK3whKmccKpWe
wRPrzsOBTm2Ky+PB0DQYqorELNw4GZurkiDdYQWIXMVoQUO/bwpg/jszUNXZ
D/IlXmitW0jWqYl4rZYJtPx6P6vbWERIXjVmTh9gT/NlpcK1O2HXrXxW7L6b
yJlu4m/O+ApllyMxaJQ/aOb5wQq3PcROEAb+URNwvKsDZIfp8NV6E2HzQTGu
fFXJCc0jSEFqKlHf8AgUshRp3Q8Z+GtbFvfs0x5sed5I8ueMo9t6bfBz3Gje
3ygHtVbcZisbR+BXhwX80bA6Zv/mGk7KaEafy91kC1zAY2U3UPNYB051doAV
WXEoLjWgzbOm8r+HiKXqEndm6CziH/0VTtYGMfb1zVY0TlSjLzbdQM8yZb5H
X51f9NtrrFLIJV155WxYuxdctaRwZqwynagWgaFeBTgmwQXEC+txvG0irvPr
YPhWm2/KfoW5bubY1t2EsqdsIe+8DMzznsYk4rv4RUWTjs8wtNQpj4XRvh0Y
qX0Eboq6MGS1Ie9l4Y9hb4NByW4Z3SfS4Kc3F8LWE7rsoF7/98+KxQDBPeZe
/JGM8demotBp0hHVCSzoUTnGOwyx3CeBoHF6D91ypRVmi1qxX13I7zxXDBpa
QvT3G0OVj26FruuxoJVgg3+tZuRfBr7KmQ==
               "], 
               RawArray["Real32",{{0., 0.}, {-0.1640278846025467, 
                0.06084512546658516}, {-0.324146032333374, \
-0.4029465913772583}}]}, "Version" -> {13., 0}, "ID" -> 
             5322594541469582790|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Weight" -> 3, "Type" -> "NumericalVector"|>, "Key" -> 
             "(f1f2f3)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> False, "Missing" -> 
         "Allowed"|>], "Calibrator" -> None, "Method" -> "NearestNeighbors", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[218689], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1740388`6.692191073660349, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.509977646141137, 0.05268464374234394], "Accuracy" -> 
         Around[0.8045388191550611, 0.03338516993222175], "EvaluationTime" -> 
         0.000035369624575700356`, "TestSize" -> 250, "ModelMemory" -> 82960.,
          "ModelUtility" -> -0.040220069095063815`, "TrainingSize" -> 498, 
         "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
         1.8528693333333333`*^6, "ExperimentCount" -> 2, 
         "MeanCrossEntropyHistory" -> {
           Around[0.54880758917245, 0.06892035919366077], 
           Around[0.4711477031098242, 0.041588198275208946`]}, 
         "AccuracyHistory" -> {
           Around[0.7821307657795121, 0.036460444751161426`], 
           Around[0.82694687253061, 0.033699456492553216`]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 623|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "GradientBoostedTrees", 
           "Options" -> <|
            "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
             MaxTrainingRounds -> <|"Value" -> 50|>, 
             "LeavesNumber" -> <|"Value" -> 110|>, 
             "LearningRate" -> <|"Value" -> 0.1|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "MaxBinNumber" -> <|"Value" -> 255|>, 
             "ThreadNumber" -> <|"Value" -> 6|>, 
             "MaxDepth" -> <|"Value" -> 6|>, "LeafSize" -> <|"Value" -> 15|>, 
             "FeatureFraction" -> <|"Value" -> 1|>, 
             "BaggingFraction" -> <|"Value" -> 1|>, 
             "BaggingFrequency" -> <|"Value" -> 0|>, 
             "MinGainToSplit" -> <|"Value" -> 0|>, 
             "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7672407796637111, 0.04969210531082029], "Accuracy" -> 
              Around[0.5001107747105971, 0.07053377566679372], 
              "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 100, 
              "ModelMemory" -> 28080, "ModelUtility" -> -0.4410699252106206, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01, "TrainingMemory" -> 
              75592, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7672407796637111, 0.03513762463671708]}, 
              "AccuracyHistory" -> {
                Around[0.5001107747105971, 0.04987491107668054]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6980431902393518, 0.10167408189936948`], "Accuracy" -> 
              Around[0.7531851417363182, 0.042982461739194386`], 
              "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 200, 
              "ModelMemory" -> 131048, 
              "ModelUtility" -> -0.36240089053322333`, "TrainingSize" -> 80, 
              "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              392040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6980431902393518, 0.07189443278196056]}, 
              "AccuracyHistory" -> {
                Around[0.7531851417363182, 0.030393190167875676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6461792455951361, 0.1330654211695896], "Accuracy" -> 
              Around[0.7875755125167521, 0.051529656231438396`], 
              "EvaluationTime" -> 0.0000719435523344615, "TestSize" -> 125, 
              "ModelMemory" -> 155344, 
              "ModelUtility" -> -0.29684313782096505`, "TrainingSize" -> 498, 
              "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              838512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6461792455951361, 0.09409146165046078]}, 
              "AccuracyHistory" -> {
                Around[0.7875755125167521, 0.036436969353461725`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000719435523344615, "MeanCrossEntropy" -> 
             Around[0.6461792455951361, 0.1330654211695896], "ModelMemory" -> 
             155344, "TrainingMemory" -> 838512, "TrainingTime" -> 
             0.08893301719099603|>, "Index" -> 1|>, <|
          "Value" -> "NaiveBayes", 
           "Options" -> <|"SmoothingParameter" -> <|"Value" -> 0.2|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6796774845896427`, 0.29762276983187896`], "Accuracy" -> 
              Around[0.6836530735321904, 0.046365014886031425`], 
              "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 200, 
              "ModelMemory" -> 14736, "ModelUtility" -> -1.2465798795837224`, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 52160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.6796774845896427`, 0.21045107878364464`]}, 
              "AccuracyHistory" -> {
                Around[0.6836530735321904, 0.03278501643572804]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.3699364261418447`, 0.12376959584984513`], "Accuracy" -> 
              Around[0.6579565277149926, 0.028612930631495226`], 
              "EvaluationTime" -> 0.00001463455362855382, "TestSize" -> 543, 
              "ModelMemory" -> 19376, "ModelUtility" -> -1.0258261528405281`, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 57816, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3699364261418447`, 0.08751832053014386]}, 
              "AccuracyHistory" -> {
                Around[0.6579565277149926, 0.020232397279150556`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8569694650238131, 0.1896930896069127], "Accuracy" -> 
              Around[0.7468876769083553, 0.054437838151459084`], 
              "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 125, 
              "ModelMemory" -> 25072, "ModelUtility" -> -0.58211980528054, 
              "TrainingSize" -> 498, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 135768, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8569694650238131, 0.13413327000527536`]}, 
              "AccuracyHistory" -> {
                Around[0.7468876769083553, 0.03849336451003246]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
             Around[0.8569694650238131, 0.1896930896069127], "ModelMemory" -> 
             25072, "TrainingMemory" -> 135768, "TrainingTime" -> 
             0.014202875163901533`|>, "Index" -> 2|>, <|
          "Value" -> "DecisionTree", 
           "Options" -> <|
            "DistributionSmoothing" -> <|"Value" -> 1|>, 
             "FeatureFraction" -> <|"Value" -> 1|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8655445287509548, 0.05522698259153921], "Accuracy" -> 
              Around[0.49515933060739276`, 0.04987013011667622], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 200,
               "ModelMemory" -> 22704, "ModelUtility" -> -0.5614379570677485, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.007943282347242814, 
              "TrainingMemory" -> 85104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8655445287509548, 0.03905137389494878]}, 
              "AccuracyHistory" -> {
                Around[0.49515933060739276`, 0.035263507184157224`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7890103317405955, 0.03762086577382534], "Accuracy" -> 
              Around[0.5717021348961877, 0.03462037496047063], 
              "EvaluationTime" -> 0.000023827304023744043`, "TestSize" -> 400,
               "ModelMemory" -> 29936, 
              "ModelUtility" -> -0.46566953083643337`, "TrainingSize" -> 80, 
              "TrainingTime" -> 0.01, "TrainingMemory" -> 109752, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7890103317405955, 0.02660196930278079]}, 
              "AccuracyHistory" -> {
                Around[0.5717021348961877, 0.024480301901769735`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7622394215344701, 0.04339177046134844], "Accuracy" -> 
              Around[0.5040733828474853, 0.06298126193015527], 
              "EvaluationTime" -> 0.000032774236991765535`, "TestSize" -> 125,
               "ModelMemory" -> 41008, "ModelUtility" -> -0.4329814566774417, 
              "TrainingSize" -> 498, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 270520, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7622394215344701, 0.030682615140909607`]}, 
              "AccuracyHistory" -> {
                Around[0.5040733828474853, 0.04453447739849894]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000032774236991765535`, "MeanCrossEntropy" -> 
             Around[0.7622394215344701, 0.04339177046134844], "ModelMemory" -> 
             41008, "TrainingMemory" -> 270520, "TrainingTime" -> 
             0.023692489808041325`|>, "Index" -> 3|>, <|
          "Value" -> "NearestNeighbors", 
           "Options" -> <|
            "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7370081205561729, 0.08435538692571785], "Accuracy" -> 
              Around[0.6889188119918493, 0.04613556516811299], 
              "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 200,
               "ModelMemory" -> 17872, "ModelUtility" -> -0.4106305118222493, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 75320, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7370081205561729, 0.05964826612479012]}, 
              "AccuracyHistory" -> {
                Around[0.6889188119918493, 0.032622770984246575`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7586639110179437, 0.07725914053915695], "Accuracy" -> 
              Around[0.5595167153046566, 0.07003229965562238], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 30864, "ModelUtility" -> -0.4371205332507816, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 212800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7586639110179437, 0.054630462183882365`]}, 
              "AccuracyHistory" -> {
                Around[0.5595167153046566, 0.049520313988578896`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.509977646141137, 0.05268464374234394], "Accuracy" -> 
              Around[0.8045388191550611, 0.03338516993222175], 
              "EvaluationTime" -> 0.000035369624575700356`, "TestSize" -> 250,
               "ModelMemory" -> 82960., 
              "ModelUtility" -> -0.040220069095063815`, "TrainingSize" -> 498,
               "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
              1.8528693333333333`*^6, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.54880758917245, 0.06892035919366077], 
                Around[0.4711477031098242, 0.041588198275208946`]}, 
              "AccuracyHistory" -> {
                Around[0.7821307657795121, 0.036460444751161426`], 
                Around[0.82694687253061, 0.033699456492553216`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000035369624575700356`, "MeanCrossEntropy" -> 
             Around[0.509977646141137, 0.05268464374234394], "ModelMemory" -> 
             82960., "TrainingMemory" -> 1.8528693333333333`*^6, 
             "TrainingTime" -> 0.029972684027550052`|>, "Index" -> 4|>, <|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6503741780553501, 0.04508996274749949], "Accuracy" -> 
              Around[0.648625626195746, 0.0673456009043034], "EvaluationTime" -> 
              0.0000501187233627272, "TestSize" -> 100, "ModelMemory" -> 
              108136, "ModelUtility" -> -0.2767221169612256, "TrainingSize" -> 
              15, "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
              169600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6503741780553501, 0.0318834184222057]}, 
              "AccuracyHistory" -> {
                Around[0.648625626195746, 0.047620531082515814`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6370576451391933, 0.03098709419307976], "Accuracy" -> 
              Around[0.6635130028212591, 0.04712997039279066], 
              "EvaluationTime" -> 0.00003571674682851674, "TestSize" -> 200, 
              "ModelMemory" -> 114384, "ModelUtility" -> -0.2519453328063176, 
              "TrainingSize" -> 80, "TrainingTime" -> 0.015848931924611134`, 
              "TrainingMemory" -> 189136, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6370576451391933, 0.021911184433192985`]}, 
              "AccuracyHistory" -> {
                Around[0.6635130028212591, 0.03332592166186349]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.546090746641088, 0.021064721305236556`], "Accuracy" -> 
              Around[0.7809403970810413, 0.025967921184302318`], 
              "EvaluationTime" -> 0.000057146794925626786`, "TestSize" -> 250,
               "ModelMemory" -> 135781.3333333333, 
              "ModelUtility" -> -0.09587556722234625, "TrainingSize" -> 498, 
              "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
              371925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5398754686300736, 0.041561428714609834`], 
                Around[0.5523060246521025, 0.023004318680593428`]}, 
              "AccuracyHistory" -> {
                Around[0.782130765779512, 0.036460444751161426`], 
                Around[0.7797500283825708, 0.036914941407260114`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000057146794925626786`, "MeanCrossEntropy" -> 
             Around[0.546090746641088, 0.021064721305236556`], "ModelMemory" -> 
             135781.3333333333, "TrainingMemory" -> 371925.3333333333, 
             "TrainingTime" -> 0.037550065809219005`|>, "Index" -> 5|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.00001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.7345967810718865`, 0.30141655469435735`], "Accuracy" -> 
              Around[0.7092235650416144, 0.03693323509956895], 
              "EvaluationTime" -> 0.000010863084705980554`, "TestSize" -> 300,
               "ModelMemory" -> 19528, "ModelUtility" -> -1.2780919605709298`,
               "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 91536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.7345967810718865`, 0.21313368978626596`]}, 
              "AccuracyHistory" -> {
                Around[0.7092235650416144, 0.026115740990062218`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5602093185737116, 0.0973947234515365], "Accuracy" -> 
              Around[0.7818642512360126, 0.05192797261195412], 
              "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 125, 
              "ModelMemory" -> 30792, "ModelUtility" -> -0.14788960776432114`,
               "TrainingSize" -> 498, "TrainingTime" -> 0.025118864315095794`,
               "TrainingMemory" -> 292720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5602093185737116, 0.06886846940436993]}, 
              "AccuracyHistory" -> {
                Around[0.7818642512360126, 0.03671862156718207]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
             Around[0.5602093185737116, 0.0973947234515365], "ModelMemory" -> 
             30792, "TrainingMemory" -> 292720, "TrainingTime" -> 
             0.05137642328684677|>, "Index" -> 6|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9075980896762111, 0.10119329929226385`], "Accuracy" -> 
              Around[0.7124287355678927, 0.031751879226727085`], 
              "EvaluationTime" -> 0.000011294627058970831`, "TestSize" -> 400,
               "ModelMemory" -> 19528, "ModelUtility" -> -0.6182542642809704, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 91776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9075980896762111, 0.07155446814019963]}, 
              "AccuracyHistory" -> {
                Around[0.7124287355678927, 0.022451969116634992`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5886047667864385, 0.04867109221830346], "Accuracy" -> 
              Around[0.74699129784423, 0.026305247966791713`], 
              "EvaluationTime" -> 9.397318629925313*^-6, "TestSize" -> 543, 
              "ModelMemory" -> 25672, "ModelUtility" -> -0.17955627742683322`,
               "TrainingSize" -> 80, "TrainingTime" -> 0.01995262314968879, 
              "TrainingMemory" -> 115928, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5886047667864385, 0.03441565935531818]}, 
              "AccuracyHistory" -> {
                Around[0.74699129784423, 0.018600619218112062`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.560127185598051, 0.097345682036698], "Accuracy" -> 
              Around[0.7818642512360126, 0.05192797261195412], 
              "EvaluationTime" -> 0.000020679145539688902`, "TestSize" -> 125,
               "ModelMemory" -> 30792, "ModelUtility" -> -0.14773099313521, 
              "TrainingSize" -> 498, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 292656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.560127185598051, 0.06883379188737863]}, 
              "AccuracyHistory" -> {
                Around[0.7818642512360126, 0.03671862156718207]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000020679145539688902`, "MeanCrossEntropy" -> 
             Around[0.560127185598051, 0.097345682036698], "ModelMemory" -> 
             30792, "TrainingMemory" -> 292656, "TrainingTime" -> 
             0.05137642328684677|>, "Index" -> 7|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.0001|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3406059436363356`, 0.19442040193527058`], "Accuracy" -> 
              Around[0.7223535224343357, 0.03151751474166708], 
              "EvaluationTime" -> 0.00001, "TestSize" -> 400, "ModelMemory" -> 
              19528, "ModelUtility" -> -1.0148676241674655`, "TrainingSize" -> 
              15, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              91664, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.3406059436363356`, 0.137475984609444]}, 
              "AccuracyHistory" -> {
                Around[0.7223535224343357, 0.022286248399979766`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5602086316636831, 0.09739427486481306], "Accuracy" -> 
              Around[0.7818642512360126, 0.05192797261195412], 
              "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 125, 
              "ModelMemory" -> 30792, "ModelUtility" -> -0.1478882680306356, 
              "TrainingSize" -> 498, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 292560, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5602086316636831, 0.06886815220565583]}, 
              "AccuracyHistory" -> {
                Around[0.7818642512360126, 0.03671862156718207]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
             Around[0.5602086316636831, 0.09739427486481306], "ModelMemory" -> 
             30792, "TrainingMemory" -> 292560, "TrainingTime" -> 
             0.05137642328684677|>, "Index" -> 8|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5593993776271466, 0.09691187147033925], "Accuracy" -> 
              Around[0.7818642512360126, 0.05192797261195412], 
              "EvaluationTime" -> 0.000020679145539688902`, "TestSize" -> 125,
               "ModelMemory" -> 30792, "ModelUtility" -> -0.1463245952815626, 
              "TrainingSize" -> 498, "TrainingTime" -> 0.025118864315095794`, 
              "TrainingMemory" -> 292720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5593993776271466, 0.06852704149415599]}, 
              "AccuracyHistory" -> {
                Around[0.7818642512360126, 0.03671862156718207]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000020679145539688902`, "MeanCrossEntropy" -> 
             Around[0.5593993776271466, 0.09691187147033925], "ModelMemory" -> 
             30792, "TrainingMemory" -> 292720, "TrainingTime" -> 
             0.05654266445225378|>, "Index" -> 9|>, <|
          "Value" -> "LogisticRegression", 
           "Options" -> <|
            "L1Regularization" -> <|"Value" -> 0|>, 
             "L2Regularization" -> <|"Value" -> 1.|>, 
             "OptimizationMethod" -> <|"Value" -> Automatic|>, 
             MaxIterations -> <|"Value" -> 30|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6507344995844025, 0.034541410906271434`], "Accuracy" -> 
              Around[0.7318722863985857, 0.031014794820323953`], 
              "EvaluationTime" -> 0.000011294627058970831`, "TestSize" -> 400,
               "ModelMemory" -> 19528, 
              "ModelUtility" -> -0.27406036247495325`, "TrainingSize" -> 15, 
              "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              91576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6507344995844025, 0.0244244658835755]}, 
              "AccuracyHistory" -> {
                Around[0.7318722863985857, 0.021930771734560477`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6162440584782851, 0.029779030548502956`], "Accuracy" -> 
              Around[0.6845062438750473, 0.02807647117844266], 
              "EvaluationTime" -> 0.000012957093272885202`, "TestSize" -> 543,
               "ModelMemory" -> 25672, 
              "ModelUtility" -> -0.21866018953922273`, "TrainingSize" -> 80, 
              "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
              116128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6162440584782851, 0.021056954438007792`]}, 
              "AccuracyHistory" -> {
                Around[0.6845062438750473, 0.01985306316206546]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5535485344733116, 0.09315246836413636], "Accuracy" -> 
              Around[0.7818642512360126, 0.05192797261195412], 
              "EvaluationTime" -> 0.00002275054883404223, "TestSize" -> 125, 
              "ModelMemory" -> 30792, "ModelUtility" -> -0.13485105920590024`,
               "TrainingSize" -> 498, "TrainingTime" -> 0.025118864315095794`,
               "TrainingMemory" -> 292720, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5535485344733116, 0.06586874206454615]}, 
              "AccuracyHistory" -> {
                Around[0.7818642512360126, 0.03671862156718207]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00002275054883404223, "MeanCrossEntropy" -> 
             Around[0.5535485344733116, 0.09315246836413636], "ModelMemory" -> 
             30792, "TrainingMemory" -> 292720, "TrainingTime" -> 
             0.05137642328684677|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 623, 
      "PreprocessorEvaluationTime" -> 5.212109375*^-6, "PreprocessorMemory" -> 
      92920, "InputDimension" -> 3, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6710173695902983, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8587890558673671`17.339026027286476*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 15, "TimeBudgets" -> 0.19599999999999998`, 
          "ElapsedTimes" -> 0.1880667, "ExperimentCounts" -> 9|>, <|
         "TrainingSizes" -> 80, "TimeBudgets" -> 0.27999999999999997`, 
          "ElapsedTimes" -> 0.2620592, "ExperimentCounts" -> 7|>, <|
         "TrainingSizes" -> 498, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3910888, "ExperimentCounts" -> 12|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {3}, "ID" -> 
           7990967109164924396|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {51}, "ID" -> 
           6705839947104244181|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           7731761509669997192|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 1.3531847, 
      "MaxTrainingMemory" -> 2815168, "DataMemory" -> 131816, 
      "FunctionMemory" -> 344352, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 12, 21, 50, 56.4164913`9.503980909084285}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8587626304066496`*^9, {3.8587629887963104`*^9, 3.858762996169995*^9}, 
   3.858763084090783*^9, 3.8587638564870667`*^9},
 CellLabel->
  "Out[185]=",ExpressionUUID->"16d572f7-2040-47ef-9d48-a2b7c3142f68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"classif", ",", " ", "testSet"}], "]"}]], "Input",
 CellChangeTimes->{3.858763081301953*^9},
 CellLabel->
  "In[186]:=",ExpressionUUID->"16bc3aa1-f55a-420d-b02d-49c3e1b3e693"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NearestNeighbors",ExpressionUUID->
                 "7dbffe54-04ea-496e-89f5-83f212886ca7"],
                TextCell["NearestNeighbors"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "269"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"77.3", "2.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    77.3234200743494426433`3., 2.5578608099906547935`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"63.9", "2.9"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    63.9405204460966487545`3., 2.9331239329959060136`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.5905249395629319498`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0152020221369855157`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.5601208952889609183`3.", "\", \"", 
                   "0.6209289838369029813`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.5601208952889609183`3., 
                   ", ", 0.6209289838369029813`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.5267434095830098029`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0257403921833071481`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.4752626252163955067`3.", "\", \"", 
                   "0.578224193949624099`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.4752626252163955067`3., 
                   ", ", 0.578224193949624099`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.07`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"9.7`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{0.902500237539252, 0.7436271953661022, 
                  0.37037154062235766`}, {0.882121696119426, 
                  0.6545092799321763, 0.1951155116029587}}, {{1., 0.42, 0.}, {
                  0.9354051815257073, 0.8743571751901725, 
                  0.6805769831069515}}}, {{0, 0}, {2, 2}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["159", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "159", "\" examples of \"", "0", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7681159420289855`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9244186046511628`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8390501319261212`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{159, " examples of ", 0, " correctly classified"}], 
                    Row[{"Precision = ", 0.7681159420289855}], 
                    Row[{"Recall = ", 0.9244186046511628}], 
                    Row[{"FScore = ", 0.8390501319261212}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["48", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "48", "\" examples of \"", "1", "\" misclassified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2318840579710145`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.4948453608247423`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{48, " examples of ", 1, " misclassified as ", 0}], 
                    Row[{"Column fraction = ", 0.2318840579710145}], 
                    Row[{"Row fraction = ", 0.4948453608247423}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "0", "\" misclassified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.20967741935483872`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0755813953488372`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " examples of ", 0, " misclassified as ", 1}], 
                    Row[{"Column fraction = ", 0.20967741935483872`}], 
                    Row[{"Row fraction = ", 0.0755813953488372}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["49", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "49", "\" examples of \"", "1", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7903225806451613`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5051546391752577`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6163522012578616`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{49, " examples of ", 1, " correctly classified"}], 
                    Row[{"Precision = ", 0.7903225806451613}], 
                    Row[{"Recall = ", 0.5051546391752577}], 
                    Row[{"FScore = ", 0.6163522012578616}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "172", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9244186046511628`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{172, " example", "s", " of class ", 0}], 
                    Row[{"Recall = ", 0.9244186046511628}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    "97", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5051546391752577`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{97, " example", "s", " of class ", 1}], 
                    Row[{"Recall = ", 0.5051546391752577}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "207", "\" example\"", "\"s\"", "\" classified as \"", 
                    "0"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7681159420289855`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{207, " example", "s", " classified as ", 0}], 
                    Row[{"Precision = ", 0.7681159420289855}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "62", "\" example\"", "\"s\"", "\" classified as \"", 
                    "1"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7903225806451613`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{62, " example", "s", " classified as ", 1}], 
                    Row[{"Precision = ", 0.7903225806451613}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {
                    0.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["172", TraditionalForm]}, {0.5, 
                    FormBox["97", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["207", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["62", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->181.2,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 623, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Nominal"|>,
               "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Nominal", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 623, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13., 0}, "ID" -> 1475203784826948804|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>, 
                    "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
                    0.75 -> 1, 0.83 -> 2, 0.92 -> 3, 1 -> 4, 2 -> 5, 3 -> 6, 
                    4 -> 7, 5 -> 8, 7 -> 9, 8 -> 10, 9 -> 11, 10 -> 12, 11 -> 
                    13, 12 -> 14, 13 -> 15, 14 -> 16, 14.5 -> 17, 15 -> 18, 
                    16 -> 19, 17 -> 20, 18 -> 21, 19 -> 22, 20 -> 23, 20.5 -> 
                    24, 21 -> 25, 22 -> 26, 23 -> 27, 23.5 -> 28, 24 -> 29, 
                    25 -> 30, 26 -> 31, 27 -> 32, 28 -> 33, 28.5 -> 34, 29 -> 
                    35, 30 -> 36, 31 -> 37, 32 -> 38, 32.5 -> 39, 33 -> 40, 
                    34 -> 41, 35 -> 42, 36 -> 43, 36.5 -> 44, 37 -> 45, 38 -> 
                    46, 39 -> 47, 40 -> 48, 40.5 -> 49, 41 -> 50, 42 -> 51, 
                    43 -> 52, 44 -> 53, 45 -> 54, 45.5 -> 55, 46 -> 56, 47 -> 
                    57, 48 -> 58, 49 -> 59, 50 -> 60, 51 -> 61, 52 -> 62, 53 -> 
                    63, 54 -> 64, 55 -> 65, 55.5 -> 66, 56 -> 67, 58 -> 68, 
                    59 -> 69, 60 -> 70, 61 -> 71, 62 -> 72, 63 -> 73, 64 -> 
                    74, 65 -> 75, 66 -> 76, 70.5 -> 77, 71 -> 78, "" -> 
                    79|>, <|"female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13., 0}, "ID" -> 
                    805960690728832372, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {3, 79, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, CompressedData["
1:eJw1UksoRVEUvVJCBorEQBEZKFIUyWsZqCelkCKlEBFFSiElRCklklIkCb0S
RUi9sniRT4Tn/38ZKKUoUsrAPedsd3Jup33WXr/YqqaiGj/Lsgqs/8/Hys6S
gfGUJ3p+FyPSKx8Z3xEw7R1+YN9PeVKj554vravrQZ93dH6H5MzG3dHVUn2c
XXzL4E932X3vDRuaw+yRax6+19t/V0xuVEhXHHyL6s9zXvJDXbdesPB1b7Lb
dc7l2pjE6JszhmvgM2q4TC8vnxNsiFOma0InTOH8Tv7YMb/Ump8jrtks3GWH
bFN03AfM1ED71LQ7d7mpxp922KMJbtMmayvxUKlx+G9xyOFvU9hgpF7g5oRe
sE7FJjV0lTNq3LvEUg28wIokJWSOdXpgij5Fr3mEm6mho4Nv7bTS9Am5R4WZ
g7xDgcGBy+BC9mDM7IXwgPBCoOEJ4Y0uowOiC6ITWUY3xAesGF8gPkF8Q4bx
EeIrxGeI75AcUGRygeQEyQ2SIyRX1JucIblDeoBc0wtIT9BregPpEaRXqDI9
g/QOf6ISTO0=
                    "], {-0.5, 0., 0.5}}, "Version" -> {13., 0}, 
                    "ID" -> 6831348230023982856, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.7941635766521407, \
-0.06279821363423388, -0.6044506579394452}, {
                    0.34866706459416624`, -0.8617344796895391, \
-0.36857151895051066`}, {-0.49773034023089924`, -0.503458112337609, 
                    0.7062538053243216}}, 
                    "Precisions" -> {10.547923927068167`, 11.469452528022298`,
                     14.760418440950634`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {0.10040981612117603`, 0.05995936600227766, 
                    0.06904000744780207}, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Version" -> {13., 0}, "ID" -> 5421644807349238107|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3|>, 
                    "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {0.10040981612117601`, 0.05995936600227762, 
                    0.06904000744780209}, 
                    "StandardDeviation" -> {0.29135874838967485`, 
                    0.2923583443039394, 0.2817426855660419}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    3185515477251867342|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, 
                    "Mean" -> {0.10040981612117601`, 0.05995936600227762, 
                    0.06904000744780209}, 
                    "StandardDeviation" -> {0.29135874838967485`, 
                    0.2923583443039394, 0.2817426855660419}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f1f2f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    3185515477251867342|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {3}, "ID" -> 
                    7453478256874281711|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {51}, 
                    "ID" -> 9138240744379437000|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 4823998046899962003|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0654686, "MaxTrainingMemory" -> 
                    371944, "DataMemory" -> 62384, "FunctionMemory" -> 61944, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 12, 21, 50, 55.1349817`9.494002073908344}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3846339974107953`, \
-2.3846339974107953`, -2.260210271251404, -2.2323009059086294`, \
-2.1417991275395836`, -2.097404235031564, -2.0460772121666544`, \
-2.006275270805729, -1.9544998016902009`, -1.931607821684366, \
-1.8804894345726173`}, "LeftBoundary" -> -2.260210271251404, "LeftScale" -> 
                    0.06221186307969572, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.280589423418462, 0.15327288020387622`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 967176822927612644|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>,
                 "Version" -> {13., 0}, "ID" -> 5520242497341430105|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|"Type" -> "NominalVector", "Weight" -> 3|>|>,
                 "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
                  0.75 -> 1, 0.83 -> 2, 0.92 -> 3, 1 -> 4, 2 -> 5, 3 -> 6, 4 -> 
                   7, 5 -> 8, 7 -> 9, 8 -> 10, 9 -> 11, 10 -> 12, 11 -> 13, 
                   12 -> 14, 13 -> 15, 14 -> 16, 14.5 -> 17, 15 -> 18, 16 -> 
                   19, 17 -> 20, 18 -> 21, 19 -> 22, 20 -> 23, 20.5 -> 24, 21 -> 
                   25, 22 -> 26, 23 -> 27, 23.5 -> 28, 24 -> 29, 25 -> 30, 26 -> 
                   31, 27 -> 32, 28 -> 33, 28.5 -> 34, 29 -> 35, 30 -> 36, 31 -> 
                   37, 32 -> 38, 32.5 -> 39, 33 -> 40, 34 -> 41, 35 -> 42, 36 -> 
                   43, 36.5 -> 44, 37 -> 45, 38 -> 46, 39 -> 47, 40 -> 48, 
                   40.5 -> 49, 41 -> 50, 42 -> 51, 43 -> 52, 44 -> 53, 45 -> 
                   54, 45.5 -> 55, 46 -> 56, 47 -> 57, 48 -> 58, 49 -> 59, 50 -> 
                   60, 51 -> 61, 52 -> 62, 53 -> 63, 54 -> 64, 55 -> 65, 55.5 -> 
                   66, 56 -> 67, 58 -> 68, 59 -> 69, 60 -> 70, 61 -> 71, 62 -> 
                   72, 63 -> 73, 64 -> 74, 65 -> 75, 66 -> 76, 70.5 -> 77, 71 -> 
                   78, "" -> 79|>, <|"female" -> 1, "male" -> 2|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                1089012348783539370, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 3|>|>|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 4840604436159386362|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|0 -> 1, 1 -> 2|>}, "MissingCode" -> 0, 
                "Version" -> {13., 0}, "ID" -> 8361458276478038540, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 3972604269906377310|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>,\
 "Key" -> "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|0 -> 0.6048, 1 -> 0.3952|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1:eJwkXHc8198XRnbJ3jIjpSFJEl2aQiSrFJFRMippymyXr1EUIXtERjbhWmVk
752VmS2bfvf4/ZO/ep3XOfe5z3mec8/7I3L15nkLKgoKipvkHybyl1GEg5Ep
sxS9ctN6ndY9itwijENnm+pR0kuzJ+27BrHitmuqBXee4ZDPP79QTn9BNlGh
k6ftm3DEjUtxn8e68fnayK2Pqdvwt5Ihpn/yuahpy6cnSfcKsEKsnPTP/Eb8
41kTbX95G+7VWYm37+nBjX3SnP8KinGpZKss1eEmrL2/LUjjdjEeU30k/dq6
AuUkHRzRPdePzykLZE9FFCP+rQl7bZhrcYlZll600wfE88bX9tqPZOTWnv42
JTUVzUorfm9ZL8Hhvp6UW3YkIQYT8fNbSD4ytnP5GSSfRxQ2XMskn9szl027
KXuxVOl5g7OyzeiUd8TNMKpCfDVpze6LbR/qM190X2WpRAFzi7L8PPXIoTx5
X4h9GW4Y4aIp+pyJRq87zlSQfNL/u17+i+RD/az55h2Sz97Vhz2LJB/BN4en
1uWb8KiN6xO2G41oE+XlOluBfiRIVf318Jl6dKH+w51Kmhok+qOUU5IrGaeO
JvlOn2jAap8tXS7LN6CrEdGyj9XKkS/Na5ZKEqe2OcGsj8RJOX78l/gQxtMX
YxxF+MPRo5migAv+PejO80rO8cwKvHp186UBg3r0bJ1vlILRA6lzKRXt+1aE
t/Hv13HWnkLZ4XSx17nt0SuvtGMnrH/gaLrN82+CarFr8HHVPlK3pHL0byup
W2rvEzo4nzLJSlnKwmJ8ePl50yZyPvGnLZj/a85FKralr2t2NOGXYsFoRq4V
75K8si6q3Ylv3G8byrtRgRZvbvN7KVuPnzp8prwlN4D6Aw8JZX8fwAfN45sB
B3rMDF+hbku7NNc4yPloZddxAd6Ypq3G4HzcatvWOsj5/HFl2KFBzmd1Mdj4
EzmfCbWqtnhyPtbXSlzXyPkc1xnPgPOZn1b2iSbnc0GrhvsHOR+pPMrkWhIn
QGdAAPBmIiWfv5XUjbNV+g0Vqds5ied3DEjdCr4mPkxXK0P7zjueXepKx6zs
UstHs5qwbXZNprZrGz64c78jJWUTatb4rt0gmIo8w2q1mzSS8b+I0Udr1NmI
3UKpo4nUTe61nDI3qduxHp9QZhLHnvXPS3kS59U7ZQ09EifJVV2PgrsesSTX
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
8KzpmYBVqYRn/dVrkMB8icnsSV3wrFWTZdN4/1SkjPPrZ8KztHNU+MGz4ux1
uZcRnnXgxGc5nKeyP+wH9OBu1LtjqMsM2igw5lg6qufyYKdBW0dCD/u1UT9r
EwuillRQng3H+j505lN7er5Pyqh+oWUW7FdeOx9AbefUi/i88y2lIRVz5eF4
KX0zQsNwy6tyWkX/TiL86BLlH4x34TTmcsW4iF6Pp17i5IUfvSIbh3zVyILr
Gw+1/aS0V6yJmFAvpHqeWVtGfqihCkMHgtA32GK3zSm6+wmlpcxKreNvoep7
yt6hb3Dg3f2QiJlcmnt3eC7jHc8lfYz9SIEj5xl7ZHLGE5/hPCreXn/gR/Wa
OHzXSr+h+yeTntaENFPmCaUJ2HMq+6tKF/MyXq+uZWJexufHpogybaIiv/iO
Xdcqos4/WPQRe07rO36qoL5gtkw1ZxU5z7aowx/hD4Q3rFcGTtQ+v5wVOOTk
8iT590TfZqs9/+sn+uYsFayHforRWfGf0LfyK4+SmIi+SZR+ai8i+pa/bnrN
INE3857X5YNE31hTtLsZe6Uy1tyEPxj4E80HHCLZ37YE+hZSRJvjPML3Rc9A
r09c5ZZc0JlKs6qo20KO63/nXCEn1eP3Jej1Oa5DkXVEjsWV5+HDRE55rcm5
X0ROdlh6LvZbalzkEUC/y+RblxDsxbn/XevXDnI/jZlceohzwQPCL7PUztHi
v95vHnpdQu8INjgy01VPTxwdczULj6UK9j5b+ivEi/qy6/XAp+pYKmbHn3HB
0GG64sF/E5ZMNeTex16CLwwu9EzYQOSc/Vl5Gv7APYE/HjhedGrfZ/gDjriP
jHfHnA7VdCCP1Gas9l8kwYlOxmzq2IfyO5v1pQXBiZdcG34ij/TL4bNuBsGJ
Grkjtgyc6JdKQw+GxoMZ744to9N+YR8K+xavBswhJ7iovURds1b9PuVaEE71
FXlexZyEx/ThHuSRdtnIr2h720gd4r92lGv5a1r563p3zElIsUn+V/OwjQ6/
0b1n2rWU8vAPesDYw+T3rgf+QHu3gQnkMFVeoNB/YH5kpRX+W2PG0AvML9gc
6DMVJLxEbvfy6TWElySGJJ49SniJpePu39yEl3g0Maua1AVRId0dCc8JLzHp
ag/B/MKf2aFA+INTquFc2Heru7lgEnrt6RDB2Gf3jfUNIy/Wts2KBXulMl2V
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
               "] -> 
              Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 50, 
         "ClassPriors" -> {0.6048, 0.3952}, 
         "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UDAfqJaRiXEUDQY0MiAAfcgQMA==
          "], "DistributionSmoothing" -> 0.5, 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3)" -> <|
               "Type" -> "NominalVector", "Weight" -> 3, 
                "SetSize" -> {3, 79, 2}|>|>, 
            "Output" -> <|
             "(f1f2f3)" -> <|"Weight" -> 3, "Type" -> "NumericalVector"|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 3, 
                    "SetSize" -> {3, 79, 2}|>|>, 
                "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 
                   14, 15 -> 15, 16 -> 16, 17 -> 17, 18 -> 18, 19 -> 19, 20 -> 
                   20, 21 -> 21, 22 -> 22, 23 -> 23, 24 -> 24, 25 -> 25, 26 -> 
                   26, 27 -> 27, 28 -> 28, 29 -> 29, 30 -> 30, 31 -> 31, 32 -> 
                   32, 33 -> 33, 34 -> 34, 35 -> 35, 36 -> 36, 37 -> 37, 38 -> 
                   38, 39 -> 39, 40 -> 40, 41 -> 41, 42 -> 42, 43 -> 43, 44 -> 
                   44, 45 -> 45, 46 -> 46, 47 -> 47, 48 -> 48, 49 -> 49, 50 -> 
                   50, 51 -> 51, 52 -> 52, 53 -> 53, 54 -> 54, 55 -> 55, 56 -> 
                   56, 57 -> 57, 58 -> 58, 59 -> 59, 60 -> 60, 61 -> 61, 62 -> 
                   62, 63 -> 63, 64 -> 64, 65 -> 65, 66 -> 66, 67 -> 67, 68 -> 
                   68, 69 -> 69, 70 -> 70, 71 -> 71, 72 -> 72, 73 -> 73, 74 -> 
                   74, 75 -> 75, 76 -> 76, 77 -> 77, 78 -> 78, 79 -> 79|>, <|
                  1 -> 1, 2 -> 2|>}, 
                "Output" -> <|
                 "(f1f2f3)" -> <|
                   "Weight" -> 3, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.5273984670639038, -0.15432728826999664`, \
-0.3316039443016052}, {-0.12462006509304047`, 0.03536298871040344, 
                   0.5185959935188293}, {0.18527460098266602`, 
                   0.8396864533424377, 
                   0.29430946707725525`}}], CompressedData["
1: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
QvT3G0OVj26FruuxoJVgg3+tZuRfBr7KmQ==
                  "], 
                  RawArray["Real32",{{0., 0.}, {-0.1640278846025467, 
                   0.06084512546658516}, {-0.324146032333374, \
-0.4029465913772583}}]}, "Version" -> {13., 0}, "ID" -> 
                5322594541469582790|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Weight" -> 3, "Type" -> "NumericalVector"|>, 
                "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[218689], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.1740388`6.692191073660349, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.509977646141137, 0.05268464374234394], "Accuracy" -> 
            Around[0.8045388191550611, 0.03338516993222175], "EvaluationTime" -> 
            0.000035369624575700356`, "TestSize" -> 250, "ModelMemory" -> 
            82960., "ModelUtility" -> -0.040220069095063815`, "TrainingSize" -> 
            498, "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
            1.8528693333333333`*^6, "ExperimentCount" -> 2, 
            "MeanCrossEntropyHistory" -> {
              Around[0.54880758917245, 0.06892035919366077], 
              Around[0.4711477031098242, 0.041588198275208946`]}, 
            "AccuracyHistory" -> {
              Around[0.7821307657795121, 0.036460444751161426`], 
              Around[0.82694687253061, 0.033699456492553216`]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 623|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "GradientBoostedTrees", 
              "Options" -> <|
               "BoostingMethod" -> <|"Value" -> "Gradient"|>, 
                MaxTrainingRounds -> <|"Value" -> 50|>, 
                "LeavesNumber" -> <|"Value" -> 110|>, 
                "LearningRate" -> <|"Value" -> 0.1|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "MaxBinNumber" -> <|"Value" -> 255|>, 
                "ThreadNumber" -> <|"Value" -> 6|>, 
                "MaxDepth" -> <|"Value" -> 6|>, 
                "LeafSize" -> <|"Value" -> 15|>, 
                "FeatureFraction" -> <|"Value" -> 1|>, 
                "BaggingFraction" -> <|"Value" -> 1|>, 
                "BaggingFrequency" -> <|"Value" -> 0|>, 
                "MinGainToSplit" -> <|"Value" -> 0|>, 
                "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7672407796637111, 0.04969210531082029], "Accuracy" -> 
                 Around[0.5001107747105971, 0.07053377566679372], 
                 "EvaluationTime" -> 0.00001995262314968879, "TestSize" -> 
                 100, "ModelMemory" -> 28080, 
                 "ModelUtility" -> -0.4410699252106206, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.01, "TrainingMemory" -> 75592, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7672407796637111, 0.03513762463671708]}, 
                 "AccuracyHistory" -> {
                   Around[0.5001107747105971, 0.04987491107668054]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6980431902393518, 0.10167408189936948`], "Accuracy" -> 
                 Around[0.7531851417363182, 0.042982461739194386`], 
                 "EvaluationTime" -> 0.00004496472020903844, "TestSize" -> 
                 200, "ModelMemory" -> 131048, 
                 "ModelUtility" -> -0.36240089053322333`, "TrainingSize" -> 
                 80, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 392040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6980431902393518, 0.07189443278196056]}, 
                 "AccuracyHistory" -> {
                   Around[0.7531851417363182, 0.030393190167875676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6461792455951361, 0.1330654211695896], "Accuracy" -> 
                 Around[0.7875755125167521, 0.051529656231438396`], 
                 "EvaluationTime" -> 0.0000719435523344615, "TestSize" -> 125,
                  "ModelMemory" -> 155344, 
                 "ModelUtility" -> -0.29684313782096505`, "TrainingSize" -> 
                 498, "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
                 838512, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6461792455951361, 0.09409146165046078]}, 
                 "AccuracyHistory" -> {
                   Around[0.7875755125167521, 0.036436969353461725`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0000719435523344615, "MeanCrossEntropy" -> 
                Around[0.6461792455951361, 0.1330654211695896], "ModelMemory" -> 
                155344, "TrainingMemory" -> 838512, "TrainingTime" -> 
                0.08893301719099603|>, "Index" -> 1|>, <|
             "Value" -> "NaiveBayes", 
              "Options" -> <|
               "SmoothingParameter" -> <|"Value" -> 0.2|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6796774845896427`, 0.29762276983187896`], 
                 "Accuracy" -> 
                 Around[0.6836530735321904, 0.046365014886031425`], 
                 "EvaluationTime" -> 0.00001790077753714996, "TestSize" -> 
                 200, "ModelMemory" -> 14736, 
                 "ModelUtility" -> -1.2465798795837224`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 52160, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.6796774845896427`, 0.21045107878364464`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6836530735321904, 0.03278501643572804]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.3699364261418447`, 0.12376959584984513`], 
                 "Accuracy" -> 
                 Around[0.6579565277149926, 0.028612930631495226`], 
                 "EvaluationTime" -> 0.00001463455362855382, "TestSize" -> 
                 543, "ModelMemory" -> 19376, 
                 "ModelUtility" -> -1.0258261528405281`, "TrainingSize" -> 80,
                  "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 57816, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.3699364261418447`, 0.08751832053014386]}, 
                 "AccuracyHistory" -> {
                   Around[0.6579565277149926, 0.020232397279150556`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8569694650238131, 0.1896930896069127], "Accuracy" -> 
                 Around[0.7468876769083553, 0.054437838151459084`], 
                 "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 
                 125, "ModelMemory" -> 25072, 
                 "ModelUtility" -> -0.58211980528054, "TrainingSize" -> 498, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 135768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8569694650238131, 0.13413327000527536`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7468876769083553, 0.03849336451003246]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
                Around[0.8569694650238131, 0.1896930896069127], "ModelMemory" -> 
                25072, "TrainingMemory" -> 135768, "TrainingTime" -> 
                0.014202875163901533`|>, "Index" -> 2|>, <|
             "Value" -> "DecisionTree", 
              "Options" -> <|
               "DistributionSmoothing" -> <|"Value" -> 1|>, 
                "FeatureFraction" -> <|"Value" -> 1|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8655445287509548, 0.05522698259153921], "Accuracy" -> 
                 Around[0.49515933060739276`, 0.04987013011667622], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 200, "ModelMemory" -> 22704, 
                 "ModelUtility" -> -0.5614379570677485, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 85104, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8655445287509548, 0.03905137389494878]}, 
                 "AccuracyHistory" -> {
                   Around[0.49515933060739276`, 0.035263507184157224`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7890103317405955, 0.03762086577382534], "Accuracy" -> 
                 Around[0.5717021348961877, 0.03462037496047063], 
                 "EvaluationTime" -> 0.000023827304023744043`, "TestSize" -> 
                 400, "ModelMemory" -> 29936, 
                 "ModelUtility" -> -0.46566953083643337`, "TrainingSize" -> 
                 80, "TrainingTime" -> 0.01, "TrainingMemory" -> 109752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7890103317405955, 0.02660196930278079]}, 
                 "AccuracyHistory" -> {
                   Around[0.5717021348961877, 0.024480301901769735`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7622394215344701, 0.04339177046134844], "Accuracy" -> 
                 Around[0.5040733828474853, 0.06298126193015527], 
                 "EvaluationTime" -> 0.000032774236991765535`, "TestSize" -> 
                 125, "ModelMemory" -> 41008, 
                 "ModelUtility" -> -0.4329814566774417, "TrainingSize" -> 498,
                  "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 270520, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7622394215344701, 0.030682615140909607`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5040733828474853, 0.04453447739849894]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000032774236991765535`, 
                "MeanCrossEntropy" -> 
                Around[0.7622394215344701, 0.04339177046134844], 
                "ModelMemory" -> 41008, "TrainingMemory" -> 270520, 
                "TrainingTime" -> 0.023692489808041325`|>, "Index" -> 3|>, <|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7370081205561729, 0.08435538692571785], "Accuracy" -> 
                 Around[0.6889188119918493, 0.04613556516811299], 
                 "EvaluationTime" -> 0.000015848931924611124`, "TestSize" -> 
                 200, "ModelMemory" -> 17872, 
                 "ModelUtility" -> -0.4106305118222493, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.005011872336272719, "TrainingMemory" -> 
                 75320, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7370081205561729, 0.05964826612479012]}, 
                 "AccuracyHistory" -> {
                   Around[0.6889188119918493, 0.032622770984246575`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7586639110179437, 0.07725914053915695], "Accuracy" -> 
                 Around[0.5595167153046566, 0.07003229965562238], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 30864, 
                 "ModelUtility" -> -0.4371205332507816, "TrainingSize" -> 80, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 212800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7586639110179437, 0.054630462183882365`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5595167153046566, 0.049520313988578896`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.509977646141137, 0.05268464374234394], "Accuracy" -> 
                 Around[0.8045388191550611, 0.03338516993222175], 
                 "EvaluationTime" -> 0.000035369624575700356`, "TestSize" -> 
                 250, "ModelMemory" -> 82960., 
                 "ModelUtility" -> -0.040220069095063815`, "TrainingSize" -> 
                 498, "TrainingTime" -> 0.019952623149688785`, 
                 "TrainingMemory" -> 1.8528693333333333`*^6, 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.54880758917245, 0.06892035919366077], 
                   Around[0.4711477031098242, 0.041588198275208946`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7821307657795121, 0.036460444751161426`], 
                   Around[0.82694687253061, 0.033699456492553216`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000035369624575700356`, 
                "MeanCrossEntropy" -> 
                Around[0.509977646141137, 0.05268464374234394], "ModelMemory" -> 
                82960., "TrainingMemory" -> 1.8528693333333333`*^6, 
                "TrainingTime" -> 0.029972684027550052`|>, "Index" -> 4|>, <|
             "Value" -> "RandomForest", 
              "Options" -> <|
               "FeatureFraction" -> <|"Value" -> Automatic|>, 
                "LeafSize" -> <|"Value" -> Automatic|>, 
                "TreeNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6503741780553501, 0.04508996274749949], "Accuracy" -> 
                 Around[0.648625626195746, 0.0673456009043034], 
                 "EvaluationTime" -> 0.0000501187233627272, "TestSize" -> 100,
                  "ModelMemory" -> 108136, 
                 "ModelUtility" -> -0.2767221169612256, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 169600, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6503741780553501, 0.0318834184222057]}, 
                 "AccuracyHistory" -> {
                   Around[0.648625626195746, 0.047620531082515814`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6370576451391933, 0.03098709419307976], "Accuracy" -> 
                 Around[0.6635130028212591, 0.04712997039279066], 
                 "EvaluationTime" -> 0.00003571674682851674, "TestSize" -> 
                 200, "ModelMemory" -> 114384, 
                 "ModelUtility" -> -0.2519453328063176, "TrainingSize" -> 80, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 189136, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6370576451391933, 0.021911184433192985`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6635130028212591, 0.03332592166186349]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.546090746641088, 0.021064721305236556`], "Accuracy" -> 
                 Around[0.7809403970810413, 0.025967921184302318`], 
                 "EvaluationTime" -> 0.000057146794925626786`, "TestSize" -> 
                 250, "ModelMemory" -> 135781.3333333333, 
                 "ModelUtility" -> -0.09587556722234625, "TrainingSize" -> 
                 498, "TrainingTime" -> 0.019952623149688785`, 
                 "TrainingMemory" -> 371925.3333333333, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5398754686300736, 0.041561428714609834`], 
                   Around[0.5523060246521025, 0.023004318680593428`]}, 
                 "AccuracyHistory" -> {
                   Around[0.782130765779512, 0.036460444751161426`], 
                   Around[0.7797500283825708, 0.036914941407260114`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000057146794925626786`, 
                "MeanCrossEntropy" -> 
                Around[0.546090746641088, 0.021064721305236556`], 
                "ModelMemory" -> 135781.3333333333, "TrainingMemory" -> 
                371925.3333333333, "TrainingTime" -> 0.037550065809219005`|>, 
              "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.7345967810718865`, 0.30141655469435735`], 
                 "Accuracy" -> 
                 Around[0.7092235650416144, 0.03693323509956895], 
                 "EvaluationTime" -> 0.000010863084705980554`, "TestSize" -> 
                 300, "ModelMemory" -> 19528, 
                 "ModelUtility" -> -1.2780919605709298`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 91536, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.7345967810718865`, 0.21313368978626596`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7092235650416144, 0.026115740990062218`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5602093185737116, 0.0973947234515365], "Accuracy" -> 
                 Around[0.7818642512360126, 0.05192797261195412], 
                 "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 
                 125, "ModelMemory" -> 30792, 
                 "ModelUtility" -> -0.14788960776432114`, "TrainingSize" -> 
                 498, "TrainingTime" -> 0.025118864315095794`, 
                 "TrainingMemory" -> 292720, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5602093185737116, 0.06886846940436993]}, 
                 "AccuracyHistory" -> {
                   Around[0.7818642512360126, 0.03671862156718207]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
                Around[0.5602093185737116, 0.0973947234515365], "ModelMemory" -> 
                30792, "TrainingMemory" -> 292720, "TrainingTime" -> 
                0.05137642328684677|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9075980896762111, 0.10119329929226385`], "Accuracy" -> 
                 Around[0.7124287355678927, 0.031751879226727085`], 
                 "EvaluationTime" -> 0.000011294627058970831`, "TestSize" -> 
                 400, "ModelMemory" -> 19528, 
                 "ModelUtility" -> -0.6182542642809704, "TrainingSize" -> 15, 
                 "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 91776, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.9075980896762111, 0.07155446814019963]}, 
                 "AccuracyHistory" -> {
                   Around[0.7124287355678927, 0.022451969116634992`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5886047667864385, 0.04867109221830346], "Accuracy" -> 
                 Around[0.74699129784423, 0.026305247966791713`], 
                 "EvaluationTime" -> 9.397318629925313*^-6, "TestSize" -> 543,
                  "ModelMemory" -> 25672, 
                 "ModelUtility" -> -0.17955627742683322`, "TrainingSize" -> 
                 80, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 115928, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5886047667864385, 0.03441565935531818]}, 
                 "AccuracyHistory" -> {
                   Around[0.74699129784423, 0.018600619218112062`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.560127185598051, 0.097345682036698], "Accuracy" -> 
                 Around[0.7818642512360126, 0.05192797261195412], 
                 "EvaluationTime" -> 0.000020679145539688902`, "TestSize" -> 
                 125, "ModelMemory" -> 30792, 
                 "ModelUtility" -> -0.14773099313521, "TrainingSize" -> 498, 
                 "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 292656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.560127185598051, 0.06883379188737863]}, 
                 "AccuracyHistory" -> {
                   Around[0.7818642512360126, 0.03671862156718207]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000020679145539688902`, 
                "MeanCrossEntropy" -> 
                Around[0.560127185598051, 0.097345682036698], "ModelMemory" -> 
                30792, "TrainingMemory" -> 292656, "TrainingTime" -> 
                0.05137642328684677|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3406059436363356`, 0.19442040193527058`], 
                 "Accuracy" -> 
                 Around[0.7223535224343357, 0.03151751474166708], 
                 "EvaluationTime" -> 0.00001, "TestSize" -> 400, 
                 "ModelMemory" -> 19528, 
                 "ModelUtility" -> -1.0148676241674655`, "TrainingSize" -> 15,
                  "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 91664, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.3406059436363356`, 0.137475984609444]}, 
                 "AccuracyHistory" -> {
                   Around[0.7223535224343357, 0.022286248399979766`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5602086316636831, 0.09739427486481306], "Accuracy" -> 
                 Around[0.7818642512360126, 0.05192797261195412], 
                 "EvaluationTime" -> 0.00001807140329435333, "TestSize" -> 
                 125, "ModelMemory" -> 30792, 
                 "ModelUtility" -> -0.1478882680306356, "TrainingSize" -> 498,
                  "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 292560, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5602086316636831, 0.06886815220565583]}, 
                 "AccuracyHistory" -> {
                   Around[0.7818642512360126, 0.03671862156718207]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00001807140329435333, "MeanCrossEntropy" -> 
                Around[0.5602086316636831, 0.09739427486481306], 
                "ModelMemory" -> 30792, "TrainingMemory" -> 292560, 
                "TrainingTime" -> 0.05137642328684677|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5593993776271466, 0.09691187147033925], "Accuracy" -> 
                 Around[0.7818642512360126, 0.05192797261195412], 
                 "EvaluationTime" -> 0.000020679145539688902`, "TestSize" -> 
                 125, "ModelMemory" -> 30792, 
                 "ModelUtility" -> -0.1463245952815626, "TrainingSize" -> 498,
                  "TrainingTime" -> 0.025118864315095794`, "TrainingMemory" -> 
                 292720, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5593993776271466, 0.06852704149415599]}, 
                 "AccuracyHistory" -> {
                   Around[0.7818642512360126, 0.03671862156718207]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000020679145539688902`, 
                "MeanCrossEntropy" -> 
                Around[0.5593993776271466, 0.09691187147033925], 
                "ModelMemory" -> 30792, "TrainingMemory" -> 292720, 
                "TrainingTime" -> 0.05654266445225378|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6507344995844025, 0.034541410906271434`], 
                 "Accuracy" -> 
                 Around[0.7318722863985857, 0.031014794820323953`], 
                 "EvaluationTime" -> 0.000011294627058970831`, "TestSize" -> 
                 400, "ModelMemory" -> 19528, 
                 "ModelUtility" -> -0.27406036247495325`, "TrainingSize" -> 
                 15, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 91576, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6507344995844025, 0.0244244658835755]}, 
                 "AccuracyHistory" -> {
                   Around[0.7318722863985857, 0.021930771734560477`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6162440584782851, 0.029779030548502956`], 
                 "Accuracy" -> 
                 Around[0.6845062438750473, 0.02807647117844266], 
                 "EvaluationTime" -> 0.000012957093272885202`, "TestSize" -> 
                 543, "ModelMemory" -> 25672, 
                 "ModelUtility" -> -0.21866018953922273`, "TrainingSize" -> 
                 80, "TrainingTime" -> 0.01995262314968879, "TrainingMemory" -> 
                 116128, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6162440584782851, 0.021056954438007792`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6845062438750473, 0.01985306316206546]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5535485344733116, 0.09315246836413636], "Accuracy" -> 
                 Around[0.7818642512360126, 0.05192797261195412], 
                 "EvaluationTime" -> 0.00002275054883404223, "TestSize" -> 
                 125, "ModelMemory" -> 30792, 
                 "ModelUtility" -> -0.13485105920590024`, "TrainingSize" -> 
                 498, "TrainingTime" -> 0.025118864315095794`, 
                 "TrainingMemory" -> 292720, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5535485344733116, 0.06586874206454615]}, 
                 "AccuracyHistory" -> {
                   Around[0.7818642512360126, 0.03671862156718207]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00002275054883404223, "MeanCrossEntropy" -> 
                Around[0.5535485344733116, 0.09315246836413636], 
                "ModelMemory" -> 30792, "TrainingMemory" -> 292720, 
                "TrainingTime" -> 0.05137642328684677|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         623, "PreprocessorEvaluationTime" -> 5.212109375*^-6, 
         "PreprocessorMemory" -> 92920, "InputDimension" -> 3, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6710173695902983, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8587890558673671`17.339026027286476*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 15, "TimeBudgets" -> 0.19599999999999998`, 
             "ElapsedTimes" -> 0.1880667, "ExperimentCounts" -> 9|>, <|
            "TrainingSizes" -> 80, "TimeBudgets" -> 0.27999999999999997`, 
             "ElapsedTimes" -> 0.2620592, "ExperimentCounts" -> 7|>, <|
            "TrainingSizes" -> 498, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.3910888, "ExperimentCounts" -> 12|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {3}, "ID" -> 
              7990967109164924396|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {51}, "ID" -> 
              6705839947104244181|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              7731761509669997192|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.3531847, 
         "MaxTrainingMemory" -> 2815168, "DataMemory" -> 131816, 
         "FunctionMemory" -> 344352, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 12, 21, 50, 56.4164913`9.503980909084285}, 
           "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{3, 20, "male"}, {3, 21, "male"}, {3, 21, "male"}, {
        1, 61, "male"}, {2, 57, "male"}, {1, 21, "female"}, {3, 26, "male"}, {
        3, "", "male"}, {1, 80, "male"}, {3, 51, "male"}, {1, 32, "male"}, {
        1, "", "male"}, {3, 9, "female"}, {2, 28, "female"}, {
        3, 32, "male"}, {2, 31, "male"}, {3, 41, "female"}, {3, "", "male"}, {
        3, 20, "male"}, {1, 24, "female"}, {3, 2, "female"}, {
        3, "", "male"}, {3, 0.75, "female"}, {1, 48, "male"}, {
        3, 19, "male"}, {1, 56, "male"}, {3, "", "male"}, {3, 23, "female"}, {
        3, "", "male"}, {2, 18, "female"}, {3, 21, "male"}, {
        3, "", "female"}, {3, 18, "female"}, {2, 24, "male"}, {
        3, "", "male"}, {3, 32, "female"}, {2, 23, "male"}, {1, 58, "male"}, {
        1, 50, "male"}, {3, 40, "male"}, {1, 47, "male"}, {3, 36, "male"}, {
        3, 20, "male"}, {2, 32, "male"}, {2, 25, "male"}, {3, "", "male"}, {
        3, 43, "male"}, {1, "", "female"}, {2, 40, "female"}, {
        1, 31, "male"}, {2, 70, "male"}, {2, 31, "male"}, {2, "", "male"}, {
        3, 18, "male"}, {3, 24.5, "male"}, {3, 18, "female"}, {
        3, 43, "female"}, {1, 36, "male"}, {3, "", "female"}, {
        1, 27, "male"}, {3, 20, "male"}, {3, 14, "male"}, {2, 60, "male"}, {
        2, 25, "male"}, {3, 14, "male"}, {3, 19, "male"}, {3, 18, "male"}, {
        1, 15, "female"}, {1, 31, "male"}, {3, 4, "female"}, {
        3, "", "male"}, {3, 25, "male"}, {1, 60, "male"}, {2, 52, "male"}, {
        3, 44, "male"}, {3, "", "female"}, {1, 49, "male"}, {3, 42, "male"}, {
        1, 18, "female"}, {1, 35, "male"}, {3, 18, "female"}, {
        3, 25, "male"}, {3, 26, "male"}, {2, 39, "male"}, {2, 45, "female"}, {
        1, 42, "male"}, {1, 22, "female"}, {3, "", "male"}, {
        1, 24, "female"}, {1, "", "male"}, {1, 48, "male"}, {3, 29, "male"}, {
        2, 52, "male"}, {3, 19, "male"}, {1, 38, "female"}, {
        2, 27, "female"}, {3, "", "male"}, {3, 33, "male"}, {
        2, 6, "female"}, {3, 17, "male"}, {2, 34, "male"}, {2, 50, "male"}, {
        1, 27, "male"}, {3, 20, "male"}, {2, 30, "female"}, {
        3, "", "female"}, {2, 25, "male"}, {3, 25, "female"}, {
        1, 29, "female"}, {3, 11, "male"}, {2, "", "male"}, {2, 23, "male"}, {
        2, 23, "male"}, {3, 28.5, "male"}, {3, 48, "female"}, {
        1, 35, "male"}, {3, "", "male"}, {3, "", "male"}, {1, "", "male"}, {
        1, 36, "male"}, {1, 21, "female"}, {3, 24, "male"}, {3, 31, "male"}, {
        1, 70, "male"}, {3, 16, "male"}, {2, 30, "female"}, {1, 19, "male"}, {
        3, 31, "male"}, {2, 4, "female"}, {3, 6, "male"}, {3, 33, "male"}, {
        3, 23, "male"}, {2, 48, "female"}, {2, 0.67, "male"}, {
        3, 28, "male"}, {2, 18, "male"}, {3, 34, "male"}, {1, 33, "female"}, {
        3, "", "male"}, {3, 41, "male"}, {3, 20, "male"}, {1, 36, "female"}, {
        3, 16, "male"}, {1, 51, "female"}, {1, "", "male"}, {
        3, 30.5, "female"}, {3, "", "male"}, {3, 32, "male"}, {
        3, 24, "male"}, {3, 48, "male"}, {2, 57, "female"}, {3, "", "male"}, {
        2, 54, "female"}, {3, 18, "male"}, {3, "", "male"}, {
        3, 5, "female"}, {3, "", "male"}, {1, 43, "female"}, {
        3, 13, "female"}, {1, 17, "female"}, {1, 29, "male"}, {
        3, "", "male"}, {3, 25, "male"}, {3, 25, "male"}, {3, 18, "female"}, {
        3, 8, "male"}, {3, 1, "male"}, {1, 46, "male"}, {3, "", "male"}, {
        2, 16, "male"}, {3, "", "female"}, {1, "", "male"}, {3, 25, "male"}, {
        2, 39, "male"}, {1, 49, "female"}, {3, 31, "female"}, {
        3, 30, "male"}, {3, 30, "female"}, {2, 34, "male"}, {
        2, 31, "female"}, {1, 11, "male"}, {3, 0.42, "male"}, {
        3, 27, "male"}, {3, 31, "male"}, {1, 39, "male"}, {3, 18, "female"}, {
        2, 39, "male"}, {1, 33, "female"}, {3, 26, "male"}, {3, 39, "male"}, {
        2, 35, "male"}, {3, 6, "female"}, {3, 30.5, "male"}, {
        1, "", "male"}, {3, 23, "female"}, {2, 31, "male"}, {3, 43, "male"}, {
        3, 10, "male"}, {1, 52, "female"}, {3, 27, "male"}, {1, 38, "male"}, {
        3, 27, "female"}, {3, 2, "male"}, {3, "", "male"}, {3, "", "male"}, {
        2, 1, "male"}, {3, "", "male"}, {1, 62, "female"}, {
        3, 15, "female"}, {2, 0.83, "male"}, {3, "", "male"}, {
        3, 23, "male"}, {3, 18, "male"}, {1, 39, "female"}, {3, 21, "male"}, {
        3, "", "male"}, {3, 32, "male"}, {1, "", "male"}, {3, 20, "male"}, {
        2, 16, "male"}, {1, 30, "female"}, {3, 34.5, "male"}, {
        3, 17, "male"}, {3, 42, "male"}, {3, "", "male"}, {3, 35, "male"}, {
        2, 28, "male"}, {1, "", "female"}, {3, 4, "male"}, {3, 74, "male"}, {
        3, 9, "female"}, {1, 16, "female"}, {2, 44, "female"}, {
        3, 18, "female"}, {1, 45, "female"}, {1, 51, "male"}, {
        3, 24, "female"}, {3, "", "male"}, {3, 41, "male"}, {2, 21, "male"}, {
        1, 48, "female"}, {3, "", "female"}, {2, 24, "male"}, {
        2, 42, "female"}, {2, 27, "female"}, {1, 31, "male"}, {
        3, "", "male"}, {3, 4, "male"}, {3, 26, "male"}, {1, 47, "female"}, {
        1, 33, "male"}, {3, 47, "male"}, {2, 28, "female"}, {
        3, 15, "female"}, {3, 20, "male"}, {3, 19, "male"}, {3, "", "male"}, {
        1, 56, "female"}, {2, 25, "female"}, {3, 33, "male"}, {
        3, 22, "female"}, {2, 28, "male"}, {3, 25, "male"}, {
        3, 39, "female"}, {2, 27, "male"}, {1, 19, "female"}, {
        3, "", "female"}, {1, 26, "male"}, {3, 32, "male"}}, 
      "Output" -> {1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 
       0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 
       1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 
       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 
       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1,
        1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
       1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0,
        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0}|>, 
    "Predictions" -> {0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
     0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
     1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 
     0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
     1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 
     0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 
     0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 
     1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
     0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 
     0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 
     0, 0, 0, 0, 0, 0, 1, 0, 1, 0}, "LogProbabilities" -> CompressedData["
1:eJylVntMzWEYPnQ2nbl0mq3bRMpoMx2HFE0rG0JroUYzox0LK8qszFnNiIjK
XPqjpBQqxsLR6aLmrYMwSukiLd3OUSmlX6e76/z7fH+8M3+dvTu/7/3e93me
9/nehZqo7WHTZTLZ7Gky2d/fdEq+uX5mLVm/Wpets5+gLGWkldv9KrpytizW
2vanEN895u+beaCH0ru/xkTLPpOXSspROTWSpfLUqfCAEVrlP6d/hfcQxaxO
DXCuaaWgkoLmNe1vySVlpOlT2iQ9tnGzV3kW0Uvb57e2dVtUxBuK9y5e0kez
TB7mqtwuIV9m4MLNI1n9tOGKUdqc2EkX9Y011gVGsjlZK1WaesnTN3r/hKae
NA7pO1KPj9LRX6HKfee66NxvvUd5QJ+QjxwaFEPhndRif3p818t+Oh9hOGxK
a6WCmMKQkuAhoT7ExyPwYJifYzclrbyX7efTTXHRhnbLkA7anR24wCtoQDiP
/WP9sSmG0qYvTSTNr8i84WGmV/pI54yqQXIqnfHEqr5NyIf94P+L3PNGG6iX
glLM6qvVRoE/rJ/DB/NHKebqHK+3kevFSxp38yCNWqkNobktVJIjla1ZKwl4
IL/IF8cn4o98Id9YL+bD/jFG/Dh81LnGrNSCZ6QbkvSDS38L9SP/mA/7w/nC
+t5rjjxscB0gp9wBTXh0h3Ae41jHjjpqN9Gl4JoIeVKPgJfwPegR+ymdt1z3
I3KSXnzbczLJvVrAC/XB8cHhzfGH5/F75czGm1oHM53Y2JqR7PBB8BPuPuQP
9Yd8Id5a/YypTWljdF8++8ChtjoBD+wH5wFjrBdj5C+yJ79pi2qEilY9PZMS
2Cjoh/M7xAv5xXnAmNMr5kc8UK94v/a100+V7TC5e3flVQ030523NfF25a/p
XWLCskyf78J8ol9hzPGP9SJ+GCN/qBd8L/F+rB/9FPvl3ksuH/aLfCkzJpIT
H9WR9/zKwqCyMXaeMB/yh/mRT06f3HnER7FDnu8WMkq3XVYYlJfrBXxQD9z7
+796wXnBfPg9Vx/uD/I+mwe3K5rpTXFwwjX1sOCH6FecX2OMeCDeeD/qjdsv
OH/EetCf0X+5+cEY+eH8Hvnn/Ih7/4R+QN94H+KB7wHqh9tPuf0H78N9E/FH
PLB/rBdjzm+5ff6BtGHtTheJ7KZmFck/tgjvC3ce/Q/7x/yIB+cniD/6G84H
+hnnt5y/YP+oF5xH7I/TI753nP5xf8H7cR659wL9KETxIu6CeZzU2q2PLTxr
hfyod/QP3G+wH6yHw4vLj+dRv/+632N96C9YD5eP26c4P8H54fjGfH8Apwdt
BA==
     "], "CountMatrix" -> {{159, 13, 0}, {48, 49, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwN0rtKFQAAANDrWzPREoeQEC3DomwIDQnfSygE3ZzEAi8VQqJW1CCIQoKF
glgqUkSYIviEbIki37ZUU4ZBUZqkW4kNIgh6hvMHJz1UH6wLCwQCLwgngihi
iOUAB0kgkSQOcZhkUjhCKkdJI50MjnGcTE6QxUlOcZozZHOWc+SQy3nyuEA+
BRRSRDEllHKRMsq5xGWCXKGCSqq4yjWqCXGdG9ykhlvUUkc9DdzmDne5x30a
aaKZFh7QShsPeUQ7HXTSxWOe0E0PvfTxlGc8p5+XDDDIEMOMMMoY40zwikle
84a3vOM9U0wzwyxzzLPAIh/4yCc+84UlvrLMN77zg5/8YoVVfrPGH9bZ4C//
2GSL/2yzwy57BOQKI5IoookhljjiSWAfGwVLYA==
       "], {4, 50, 73, 77, 120, 124, 
       151, 168, 185, 201, 233, 246, 251}, {}}, {{1, 14, 20, 22, 23, 24, 28, 
       32, 43, 48, 49, 52, 56, 70, 71, 76, 86, 88, 89, 91, 106, 119, 123, 130,
        134, 141, 153, 156, 159, 165, 167, 181, 182, 183, 200, 202, 206, 207, 
       209, 210, 217, 218, 228, 234, 236, 248, 253, 254}, {6, 9, 11, 26, 30, 
       39, 58, 60, 68, 69, 79, 80, 85, 87, 95, 96, 99, 103, 105, 109, 116, 
       121, 126, 129, 133, 138, 142, 144, 158, 160, 175, 176, 180, 188, 199, 
       208, 214, 221, 232, 235, 237, 241, 244, 245, 250, 258, 259, 266, 
       268}, {}}}, "ExtendedClasses" -> {0, 1}, "Weights" -> 
    SparseArray[Automatic, {269}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00010335910780669146`, "SingleEvaluationTime" -> 
    0.0050717625, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{3.858763042434492*^9, 3.8587630858763623`*^9, 
  3.8587638567467203`*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"88565449-3e67-473d-9a6c-91a09bea9da7"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8587626037910595`*^9, 3.8587626043571873`*^9}},
 CellLabel->"",ExpressionUUID->"ea342f5f-d8c4-43c3-b1a8-64bf821630ca"],

Cell[CellGroupData[{

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.8587625666246023`*^9, 
  3.858762601577383*^9}},ExpressionUUID->"e8dd3bf4-27c9-41b7-87ee-\
b82551d7350b"],

Cell[BoxData[
 TemplateBox[{
  "Classify", "mlbddataev", 
   "\"The data being evaluated is not formatted correctly.\"", 2, 69, 4, 
   21617670229376603638, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.8587625890427604`*^9, {3.8587630680818996`*^9, 3.8587630687242017`*^9}, {
   3.8587638846443205`*^9, 
   3.858763887163335*^9}},ExpressionUUID->"c39c5a09-98bf-44fb-b083-\
fa00c146d4c2"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.85876303069139*^9, 
  3.858763031448561*^9}},ExpressionUUID->"e1aca25b-0894-4a51-8fa8-\
df8ec32ddf18"],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.858762650911482*^9, 3.8587626513421144`*^9}, 
   3.858763033538266*^9},ExpressionUUID->"f50e3fb8-7862-4b76-86a2-\
ab87dbb9a63e"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierMeasurements", "wrgfunc", 
   "\:f3b5The first argument should be a classifier, a list of classes, or a \
list of probabilities instead of \!\(Classify[{g[{3, 22, \\\"\\<male\\>\\\"}, \
0], g[{1, 38, \\\"\\<female\\>\\\"}, 1], g[{3, 26, \\\"\\<female\\>\\\"}, 1], \
g[{1, 35, \\\"\\<female\\>\\\"}, 1], g[{3, 35, \\\"\\<male\\>\\\"}, 0], g[{3, \
\\\"\\<\\>\\\", \\\"\\<male\\>\\\"}, 0], g[{1, 54, \\\"\\<male\\>\\\"}, 0], \
g[{3, 2, \\\"\\<male\\>\\\"}, 0], g[{3, 27, \\\"\\<female\\>\\\"}, 1], g[{2, \
14, \\\"\\<female\\>\\\"}, 1], \[LeftSkeleton]613\[RightSkeleton]}]\).\:f3b5",
    2, 77, 6, 21617670229376603638, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.8587626518653135`*^9, {3.8587630583285923`*^9, 
   3.8587630602303104`*^9}},ExpressionUUID->"fd915e4a-272c-4d83-afb5-\
ccba28e21ef1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.858763055854855*^9, 
  3.8587630558768597`*^9}},ExpressionUUID->"9832ff15-0a7a-46ed-9622-\
007847da8031"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1908., 1019.25},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{594.75, 842.25},
"PostScriptOutputFile"->"/home/roman/Documents/Projects/nsu/mathematica-\
seminars/2019/Task_03.pdf"},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
ShowSelection->True,
Magnification:>1.4 Inherited,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Title"], FontFamily -> "Courier", FontSize -> 48, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Chapter"], FontFamily -> "Courier", FontSize -> 36, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Chapter"]], 
   Cell[
    StyleData["Subchapter"], FontFamily -> "Courier", FontSize -> 28, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Section"], FontFamily -> "Courier", FontSize -> 28, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsection"], FontFamily -> "Courier", FontSize -> 20, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsubsection"], FontFamily -> "Courier", FontSize -> 20, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Text"]], 
   Cell[
    StyleData["Code"]], 
   Cell[
    StyleData["Input"]], 
   Cell[
    StyleData["Output"]], 
   Cell[
    StyleData["Subtitle"], FontFamily -> "Courier", FontSize -> 24, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsubtitle"], FontFamily -> "Courier", FontSize -> 16, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Item"], FontFamily -> "Courier", FontSize -> 14, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["ItemParagraph"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subitem"], FontFamily -> "Courier", FontSize -> 14, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["SubitemParagraph"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["Subsubitem"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["SubsubitemParagraph"], FontFamily -> "Courier", FontSize -> 14,
     FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["ItemNumbered"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["SubitemNumbered"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["SubsubitemNumbered"], FontFamily -> "Courier", FontSize -> 14, 
    FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["InlineFormula"]], 
   Cell[
    StyleData["DisplayFormula"], FontFamily -> "Bitstream Vera Sans", 
    FontSize -> 14, FontWeight -> "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
   Cell[
    StyleData["DisplayFormulaNumbered"]], 
   Cell[
    StyleData["Program"], FontFamily -> "Courier", FontSize -> 12, FontWeight -> 
    "Plain", FontSlant -> "Plain", 
    FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}]}, 
  Visible -> False, FrontEndVersion -> 
  "13.0 for Microsoft Windows (64-bit) (December 2, 2021)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"69e13bfc-8bd5-4241-baff-83c989c21e3d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 288, 4, 133, "Title",ExpressionUUID->"45c6e929-c9d7-4fbe-b75d-64e24df02906"],
Cell[871, 28, 603, 9, 69, "Subtitle",ExpressionUUID->"d5e51de8-5e00-439c-bbad-b34962655384"],
Cell[1477, 39, 463, 7, 69, "Subtitle",ExpressionUUID->"182cd4ce-250c-4115-bbc6-dacda41fc4de"],
Cell[1943, 48, 3046, 59, 172, "Text",ExpressionUUID->"08878038-b1d3-498c-889e-daa9c94692b8"],
Cell[CellGroupData[{
Cell[5014, 111, 488, 8, 88, "Section",ExpressionUUID->"27649fba-b57a-46eb-9fd3-b5b9f25bf5e2"],
Cell[5505, 121, 1981, 34, 141, "Text",ExpressionUUID->"fe28fdc7-d59c-4f57-8022-10ed163763a6"],
Cell[7489, 157, 2270, 38, 79, "Text",ExpressionUUID->"033e85f5-87af-48ab-8ef6-c26eb8bbb105"],
Cell[9762, 197, 1686, 32, 141, "Text",ExpressionUUID->"39ac23be-8e46-45ef-969b-3a10c368619c"],
Cell[11451, 231, 550, 8, 48, "Text",ExpressionUUID->"79ea1fcf-b23a-41c4-a66d-a8351813fdfe"],
Cell[12004, 241, 1038, 30, 177, "Input",ExpressionUUID->"531429d7-f9e9-4593-9c7c-2e3831e64502"],
Cell[CellGroupData[{
Cell[13067, 275, 999, 29, 104, "Input",ExpressionUUID->"fd77f649-a581-4f29-acd2-5d200d146d3b"],
Cell[14069, 306, 1580, 43, 336, "Output",ExpressionUUID->"7c5c14e8-a727-4680-94df-cd712f4ad60c"]
}, Open  ]],
Cell[15664, 352, 990, 27, 77, "Input",ExpressionUUID->"254de4a8-1cd0-434a-9bc5-dc34b13db916"],
Cell[16657, 381, 1579, 43, 332, "Output",ExpressionUUID->"631003f1-bf6f-4baf-804d-7137cd6fb158"],
Cell[CellGroupData[{
Cell[18261, 428, 1084, 31, 106, "Input",ExpressionUUID->"a0552232-0cfc-4dde-93a6-eb0c78a52435"],
Cell[19348, 461, 1581, 43, 327, "Output",ExpressionUUID->"182e84ce-efaf-499b-b833-39b800a36a21"]
}, Open  ]],
Cell[20944, 507, 326, 8, 79, "Text",ExpressionUUID->"549a661f-f75e-4e5f-8a2e-82820c82f001"],
Cell[CellGroupData[{
Cell[21295, 519, 1055, 31, 77, "Input",ExpressionUUID->"1c73e86b-05b9-43ad-850f-0f2972e1265c"],
Cell[22353, 552, 1578, 43, 336, "Output",ExpressionUUID->"3c79d151-ecd3-416d-aa6c-d05f4e45ff97"]
}, Open  ]],
Cell[23946, 598, 156, 3, 39, InheritFromParent,ExpressionUUID->"19bd52bc-1ac8-465b-861a-77f55fed6766"],
Cell[CellGroupData[{
Cell[24127, 605, 1135, 32, 77, "Input",ExpressionUUID->"eb5e6026-d407-4d9f-9c6f-c2a5f5c2e7d7"],
Cell[25265, 639, 1579, 43, 332, "Output",ExpressionUUID->"d6b112e4-0cff-49a0-b52a-66ece3bdaf65"]
}, Open  ]],
Cell[26859, 685, 1109, 31, 77, InheritFromParent,ExpressionUUID->"5e6729df-7509-48c0-ad08-1e6002b1edfd"],
Cell[27971, 718, 1550, 43, 331, "Output",ExpressionUUID->"7afa1620-0e96-4c60-9db6-70ee65513d39"],
Cell[29524, 763, 417, 9, 79, "Text",ExpressionUUID->"f0a2cf38-8e90-496b-bb5b-1593c3a537c0"],
Cell[CellGroupData[{
Cell[29966, 776, 1151, 35, 77, "Input",ExpressionUUID->"faf17506-878e-4bf2-815b-88aff2674c7a"],
Cell[31120, 813, 1561, 42, 343, "Output",ExpressionUUID->"04ef1ac3-c5dc-4cfa-8ccb-36af413fe486"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32718, 860, 1060, 31, 77, "Input",ExpressionUUID->"0feaced6-acd2-400e-9dd0-10bba9934d44"],
Cell[33781, 893, 1564, 42, 337, "Output",ExpressionUUID->"cc4da105-3191-4f75-9b67-b1f521a923f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35382, 940, 1207, 35, 104, "Input",ExpressionUUID->"2d1fb852-54ae-4cb0-a201-3b40cc8b9f9f"],
Cell[36592, 977, 1636, 44, 301, "Output",ExpressionUUID->"2ecacd50-382c-4945-b3db-d7aa1819bcfc"]
}, Open  ]],
Cell[38243, 1024, 505, 10, 79, "Text",ExpressionUUID->"e23767ba-7c0e-471f-8b03-da9f2e5e2179"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38785, 1039, 305, 5, 88, "Section",ExpressionUUID->"3df5533c-9c4d-45e2-8eb4-484940778d41"],
Cell[39093, 1046, 1411, 20, 48, "Text",ExpressionUUID->"7a4c38b4-67c8-41d9-bff6-593a89ee5a89"],
Cell[40507, 1068, 2294, 37, 79, "Text",ExpressionUUID->"2839ccbb-e8e5-4721-8b5a-54619ea93687"],
Cell[42804, 1107, 1848, 49, 63, "DisplayFormula",ExpressionUUID->"554fe09d-235b-4c59-b4ad-f0a6d1961f2d"],
Cell[44655, 1158, 311, 9, 77, "Input",ExpressionUUID->"3813e22d-a184-4ce8-a616-335eb0c943ad"],
Cell[CellGroupData[{
Cell[44991, 1171, 321, 8, 39, "Input",ExpressionUUID->"408b7ad7-025c-4608-b70e-8f37cd919615"],
Cell[45315, 1181, 320, 7, 61, "Output",ExpressionUUID->"75ef699c-11ff-4abb-b900-0b62af5dcdb9"]
}, Open  ]],
Cell[45650, 1191, 1961, 29, 110, "Text",ExpressionUUID->"c89d0e47-b4ee-4bc7-993a-afba18bd3a50"],
Cell[47614, 1222, 1570, 42, 71, "DisplayFormula",ExpressionUUID->"79288e38-87c7-4666-82f9-b400f0d1f701"],
Cell[49187, 1266, 373, 11, 77, "Input",ExpressionUUID->"99096d3b-3588-4f6a-a4e5-b613bdd44f83"],
Cell[49563, 1279, 205, 4, 39, "Input",ExpressionUUID->"f184d8a3-12d8-4d6b-a14c-d5fa07cab506"],
Cell[49771, 1285, 154, 3, 39, InheritFromParent,ExpressionUUID->"4aa5c487-8980-4d59-8f06-f534fec8863e"],
Cell[49928, 1290, 1111, 19, 48, "Text",ExpressionUUID->"044b627f-beaa-4aa7-8039-086a6c7946f1"],
Cell[51042, 1311, 1294, 31, 89, "DisplayFormula",ExpressionUUID->"29605dc5-e2cb-4365-bf0d-5b35b2f8c7f0"],
Cell[52339, 1344, 407, 12, 77, "Input",ExpressionUUID->"9a0e7a70-b820-4621-a287-2851aa8e0d07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52783, 1361, 243, 4, 88, "Section",ExpressionUUID->"0f5ed4b1-53e1-4585-81ce-f32698b5389f"],
Cell[53029, 1367, 882, 15, 48, "Text",ExpressionUUID->"88452167-4b24-4552-a369-7ef27d687735"],
Cell[CellGroupData[{
Cell[53936, 1386, 1321, 28, 126, "Input",ExpressionUUID->"78239c94-fe66-4961-af4b-55f081afbf31"],
Cell[55260, 1416, 10485, 261, 195, "Output",ExpressionUUID->"72f071b9-4882-4473-8e2d-57e247614225"]
}, Open  ]],
Cell[65760, 1680, 551, 10, 48, "Text",ExpressionUUID->"bf15711e-b189-4afb-abe2-e7253b2b5d8f"],
Cell[66314, 1692, 403, 6, 48, "Text",ExpressionUUID->"5728765a-6383-4f7d-8bca-21a591bdc71a"],
Cell[CellGroupData[{
Cell[66742, 1702, 229, 5, 56, "Input",ExpressionUUID->"28d2c508-189c-4fcb-b936-7c0ca46ef750"],
Cell[66974, 1709, 520, 10, 61, "Output",ExpressionUUID->"0d275b92-30c1-48c2-b4dd-2321e26a6b07"]
}, Open  ]],
Cell[67509, 1722, 605, 9, 48, "Text",ExpressionUUID->"74440e91-c1b3-4379-a7d3-ae595b4d93fd"],
Cell[CellGroupData[{
Cell[68139, 1735, 210, 5, 77, "Input",ExpressionUUID->"d0d91344-9134-466c-b87f-bed051e9b93c"],
Cell[68352, 1742, 181, 3, 61, "Output",ExpressionUUID->"eb11eb4f-2628-4680-99fe-e2f205280ff7"]
}, Open  ]],
Cell[68548, 1748, 1212, 19, 48, "Text",ExpressionUUID->"1ddc0c67-0de1-4337-99e4-556af1c57098"],
Cell[CellGroupData[{
Cell[69785, 1771, 916, 25, 137, "Input",ExpressionUUID->"6cca6fe5-826a-4cdf-bcdf-d1f0bd615ee0"],
Cell[70704, 1798, 9612, 125, 435, "Output",ExpressionUUID->"26413dd4-7250-4264-ac54-b93c7bf07f48"],
Cell[80319, 1925, 20755, 303, 968, "Output",ExpressionUUID->"60d55274-2956-4356-a331-7a2e73f18b95"],
Cell[101077, 2230, 11726, 160, 515, "Output",ExpressionUUID->"a6dae40f-8cd4-47a5-8d72-ab34c63f4d0b"],
Cell[112806, 2392, 9612, 125, 435, "Output",ExpressionUUID->"c1f63d7e-496b-40e4-9cab-d4ef94d31376"]
}, Open  ]],
Cell[122433, 2520, 1675, 26, 110, "Text",ExpressionUUID->"e4bcfe89-d866-4dc2-a2d3-ccaab87d75a2"],
Cell[CellGroupData[{
Cell[124133, 2550, 613, 13, 156, "Input",ExpressionUUID->"2ac1ff7d-0f45-426e-ba3f-113e1351be92"],
Cell[124749, 2565, 258, 5, 61, "Output",ExpressionUUID->"4e66e7a1-988d-4cc9-8763-7264542d3f1a"],
Cell[125010, 2572, 256, 5, 61, "Output",ExpressionUUID->"7d8c8229-91c3-492c-8085-e6ca590999ca"],
Cell[125269, 2579, 256, 5, 61, "Output",ExpressionUUID->"beb2bdd6-e6eb-42e8-8cd2-fa51cc9697d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125562, 2589, 840, 20, 232, "Input",ExpressionUUID->"ec986577-44ee-4dd2-a5f2-0b7d23c050f4"],
Cell[126405, 2611, 229, 4, 61, "Output",ExpressionUUID->"92145d9b-8c29-4b95-9451-ef1a7523eff2"],
Cell[126637, 2617, 229, 4, 61, "Output",ExpressionUUID->"aed48659-199d-461c-a5f5-12086d51de64"],
Cell[126869, 2623, 233, 4, 61, "Output",ExpressionUUID->"0f287475-e7c0-4bc3-81bf-dd3db9ead08b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127139, 2632, 410, 10, 106, "Input",ExpressionUUID->"f0ffe80d-8911-42f0-b39d-19ffba8bc88e"],
Cell[127552, 2644, 300, 5, 61, "Output",ExpressionUUID->"83b6c2a6-4372-4aad-8525-22e1772e97f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127889, 2654, 316, 7, 77, "Input",ExpressionUUID->"fed559b4-a167-4f90-a5cf-9c1056aa2a50"],
Cell[128208, 2663, 250, 5, 61, "Output",ExpressionUUID->"eda1c381-9567-46ec-87d6-74987642d281"]
}, Open  ]],
Cell[128473, 2671, 1600, 24, 48, "Text",ExpressionUUID->"8508eb62-cb2e-4836-8ced-6e2a9aa8d40f"],
Cell[CellGroupData[{
Cell[130098, 2699, 391, 10, 77, "Input",ExpressionUUID->"25f9a26d-24bb-4f3e-b7f3-8176886c5f0e"],
Cell[130492, 2711, 236, 5, 61, "Output",ExpressionUUID->"f506c91e-d5be-4f81-bd7c-110d7629f7eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130765, 2721, 609, 15, 127, "Input",ExpressionUUID->"5c10711f-7dc4-4162-8c00-087281e566aa"],
Cell[131377, 2738, 3854, 52, 196, "Output",ExpressionUUID->"f420c6ee-e661-40ff-b99d-2e791378d5fd"],
Cell[135234, 2792, 287, 6, 61, "Output",ExpressionUUID->"b9013b8f-bb64-4bec-a28d-4f3b42460471"]
}, Open  ]],
Cell[CellGroupData[{
Cell[135558, 2803, 331, 7, 104, "Input",ExpressionUUID->"11df7804-6dad-4e5a-872c-ebfefb547f5e"],
Cell[135892, 2812, 318, 8, 61, "Output",ExpressionUUID->"e14b2bf6-20f7-429e-9f77-a84ccf1a2441"]
}, Open  ]],
Cell[136225, 2823, 5304, 79, 235, "Text",ExpressionUUID->"a8f61524-6de9-4eec-87dc-9d756eb32e5b"],
Cell[141532, 2904, 1257, 37, 258, "Input",ExpressionUUID->"8b97131a-7be6-434f-95fd-a770efcb5e56"],
Cell[CellGroupData[{
Cell[142814, 2945, 338, 7, 104, "Input",ExpressionUUID->"ed2dd09b-8baa-4a95-b50c-7a6782b54d71"],
Cell[143155, 2954, 143982, 2464, 105, "Output",ExpressionUUID->"16d572f7-2040-47ef-9d48-a2b7c3142f68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[287174, 5423, 240, 5, 77, "Input",ExpressionUUID->"16bc3aa1-f55a-420d-b02d-49c3e1b3e693"],
Cell[287417, 5430, 171102, 2999, 676, "Output",ExpressionUUID->"88565449-3e67-473d-9a6c-91a09bea9da7"]
}, Open  ]],
Cell[458534, 8432, 167, 2, 39, InheritFromParent,ExpressionUUID->"ea342f5f-d8c4-43c3-b1a8-64bf821630ca"],
Cell[CellGroupData[{
Cell[458726, 8438, 173, 3, 67, "Input",ExpressionUUID->"e8dd3bf4-27c9-41b7-87ee-b82551d7350b"],
Cell[458902, 8443, 467, 12, 39, "Message",ExpressionUUID->"c39c5a09-98bf-44fb-b083-fa00c146d4c2"]
}, Open  ]],
Cell[459384, 8458, 151, 3, 39, InheritFromParent,ExpressionUUID->"e1aca25b-0894-4a51-8fa8-df8ec32ddf18"],
Cell[CellGroupData[{
Cell[459560, 8465, 177, 3, 39, "Input",ExpressionUUID->"f50e3fb8-7862-4b76-86a2-ab87dbb9a63e"],
Cell[459740, 8470, 918, 17, 65, "Message",ExpressionUUID->"fd915e4a-272c-4d83-afb5-ccba28e21ef1"]
}, Open  ]],
Cell[460673, 8490, 154, 3, 39, InheritFromParent,ExpressionUUID->"9832ff15-0a7a-46ed-9622-007847da8031"]
}, Open  ]]
}, Open  ]]
}
]
*)

